<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NFluent</name>
    </assembly>
    <members>
        <member name="T:NFluent.BooleanCheckExtensions">
            <summary>
            Provides check methods to be executed on a boolean value.
            </summary>
        </member>
        <member name="M:NFluent.BooleanCheckExtensions.IsTrue(NFluent.ICheck{System.Boolean})">
            <summary>
            Checks that the actual value is true.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not true.</exception>
        </member>
        <member name="M:NFluent.BooleanCheckExtensions.IsFalse(NFluent.ICheck{System.Boolean})">
            <summary>
            Checks that the actual value is false.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not false.</exception>
        </member>
        <member name="T:NFluent.CharCheckExtensions">
            <summary>
            Provides check methods to be executed on a char value.
            </summary>
        </member>
        <member name="M:NFluent.CharCheckExtensions.IsALetter(NFluent.ICheck{System.Char})">
            <summary>
            Checks that the checked <see cref="T:System.Char"/> is a letter.
            </summary>
            <param name="check">The chained fluent check.</param>
            <exception cref="T:NFluent.FluentCheckException">The checked <see cref="T:System.Char"/> is not a letter.</exception>
            <returns>A check link.</returns>
        </member>
        <member name="M:NFluent.CharCheckExtensions.IsADigit(NFluent.ICheck{System.Char})">
            <summary>
            Checks that the checked <see cref="T:System.Char"/> is a decimal digit.
            </summary>
            <param name="check">The chained fluent check.</param>
            <exception cref="T:NFluent.FluentCheckException">The checked <see cref="T:System.Char"/> is not a decimal digit.</exception>
            <returns>A check link.</returns>
        </member>
        <member name="M:NFluent.CharCheckExtensions.IsAPunctuationMark(NFluent.ICheck{System.Char})">
            <summary>
            Checks that the checked <see cref="T:System.Char"/> is a punctuation mark.
            </summary>
            <param name="check">The chained fluent check.</param>
            <exception cref="T:NFluent.FluentCheckException">The checked <see cref="T:System.Char"/> is not a punctuation mark.</exception>
            <returns>A check link.</returns>
        </member>
        <member name="M:NFluent.CharCheckExtensions.IsSameLetterAs(NFluent.ICheck{System.Char},System.Char)">
            <summary>
            Checks that the checked <see cref="T:System.Char"/> and the given one are the same letter, whatever the case.
            </summary>
            <param name="check">The chained fluent check.</param>
            <param name="otherChar">The other char that.</param>
            <exception cref="T:NFluent.FluentCheckException">The checked <see cref="T:System.Char"/> is not the same letter as the expected one, whatever the case.</exception>
            <returns>A check link.</returns>
        </member>
        <member name="M:NFluent.CharCheckExtensions.IsSameLetterButWithDifferentCaseAs(NFluent.ICheck{System.Char},System.Char)">
            <summary>
            Checks that the checked <see cref="T:System.Char"/> is the same letter as the other, but with different case only.
            </summary>
            <param name="check">The chained fluent check.</param>
            <param name="otherChar">The other char that.</param>
            <exception cref="T:NFluent.FluentCheckException">The checked <see cref="T:System.Char"/> is not the same as the expected one, or is the same but with the same case.</exception>
            <returns>A check link.</returns>
        </member>
        <member name="T:NFluent.CodeCheckExtensions">
            <summary>
            Static class hosting extension methods in relation with checks for code.
            </summary>
        </member>
        <member name="M:NFluent.CodeCheckExtensions.GetTrace(System.Action)">
            <summary>
            Execute the action to capture the run.
            </summary>
            <param name="action">
            <see cref="T:System.Action"/> to be analyzed.
            </param>
            <returns>
            Return <see cref="T:NFluent.RunTrace"/> describing the execution.
            </returns>
        </member>
        <member name="M:NFluent.CodeCheckExtensions.GetAsyncTrace``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Execute the function to capture the run.
            </summary>
            <typeparam name="TResult">Result type of the awaitable function.</typeparam>
            <param name="awaitableFunction">
            <see cref="T:System.Action"/> to be analyzed.
            </param>
            <returns>
            Return <see cref="T:NFluent.RunTrace"/> describing the execution.
            </returns>
        </member>
        <member name="M:NFluent.CodeCheckExtensions.GetTrace``1(System.Func{``0})">
            <summary>
            Execute the function to capture the run.
            </summary>
            <typeparam name="TU">Result type of the function.</typeparam>
            <param name="function">
            <see cref="T:System.Action"/> to be analyzed.
            </param>
            <returns>
            Return <see cref="T:NFluent.RunTrace"/> describing the execution.
            </returns>
        </member>
        <member name="M:NFluent.CodeCheckExtensions.LastsLessThan``1(NFluent.ICodeCheck{``0},System.Double,NFluent.TimeUnit)">
            <summary>
            Checks that the execution time is below a specified threshold.
            </summary>
            <typeparam name="T">Type of the checked type.</typeparam>
            <param name="check">The fluent check to be extended.
            </param>
            <param name="threshold">
            The threshold.
            </param>
            <param name="timeUnit">
            The time unit of the given threshold.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            Execution was strictly above limit.
            </exception>
        </member>
        <member name="M:NFluent.CodeCheckExtensions.ConsumesLessThan``1(NFluent.ICodeCheck{``0},System.Double,NFluent.TimeUnit)">
            <summary>
            Checks that the CPU time is below a specified threshold.
            </summary>
            <typeparam name="T">Type of the checked type.</typeparam>
            <param name="check">The fluent check to be extended.
            </param>
            <param name="threshold">
            The threshold.
            </param>
            <param name="timeUnit">
            The time unit of the given threshold.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            Execution was strictly above limit.
            </exception>
        </member>
        <member name="M:NFluent.CodeCheckExtensions.DoesNotThrow``1(NFluent.ICodeCheck{``0})">
            <summary>
            Check that the code does not throw an exception.
            </summary>
            <param name="check">The fluent check to be extended.
            </param>
            <typeparam name="T">Inferred type of the code.</typeparam>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The code raised an exception.</exception>
        </member>
        <member name="M:NFluent.CodeCheckExtensions.Throws``1(NFluent.ICodeCheck{NFluent.RunTrace})">
            <summary>
            Checks that the code did throw an exception of a specified type.
            </summary>
            <typeparam name="T">Expected exception type.</typeparam>
            <param name="check">The fluent check to be extended.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The code did not raised an exception of the specified type, or did not raised an exception at all.</exception>
        </member>
        <member name="M:NFluent.CodeCheckExtensions.ThrowsAny(NFluent.ICodeCheck{NFluent.RunTrace})">
            <summary>
            Checks that the code did throw an exception of a specified type.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The code did not raised an exception of the specified type, or did not raised an exception at all.
            </exception>
        </member>
        <member name="M:NFluent.CodeCheckExtensions.WhichResult``1(NFluent.ICodeCheck{NFluent.RunTraceResult{``0}})">
            <summary>
            Allows to perform checks on the result value.
            </summary>
            <typeparam name="T">Type of the code result. Should be inferred.</typeparam>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check object for the result.</returns>
        </member>
        <member name="T:NFluent.ComparableCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.IComparable"/> instance.
            </summary>
        </member>
        <member name="M:NFluent.ComparableCheckExtensions.IsBefore(NFluent.ICheck{System.IComparable},System.IComparable)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.ComparableCheckExtensions.IsAfter(NFluent.ICheck{System.IComparable},System.IComparable)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="T:NFluent.DateTimeCheckExtensions">
            <summary>
            Provides check methods to be executed on a date time instance. 
            </summary>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsBefore(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that the actual DateTime is strictly before the given one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time is not before the given one.</exception>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsBeforeOrEqualTo(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that the actual DateTime is before or equals to the given one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time is not before or equals to the given one.</exception>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsAfter(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that the actual DateTime is strictly after the given one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time is not after the given one.</exception>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsAfterOrEqualTo(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that the actual DateTime is after or equals to the given one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time is not after or equals to the given one.</exception>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsEqualToIgnoringMillis(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same year, month, day, hour, minute and second fields,
            (millisecond fields are ignored in comparison).
            Code example :
            <code>
                // successfull checks
                DateTime dateTime1 = new DateTime(2000, 1, 1, 0, 0, 1, 0);
                DateTime dateTime2 = new DateTime(2000, 1, 1, 0, 0, 1, 456);
                Check.That(dateTime1).IsEqualToIgnoringMillis(dateTime2);
                // failing checks (even if time difference is only 1ms)
                DateTime dateTimeA = new DateTime(2000, 1, 1, 0, 0, 1, 0);
                DateTime dateTimeB = new DateTime(2000, 1, 1, 0, 0, 0, 999);
                Check.That(dateTimeA).IsEqualToIgnoringMillis(dateTimeB);
            </code>
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time is not equal to the given one with the milliseconds ignored.</exception>
            <remarks>
            Check can fail with dateTimes in same chronological millisecond time window, e.g :
            2000-01-01T00:00:<b>01.000</b> and 2000-01-01T00:00:<b>00.999</b>.
            check fails as second fields differ even if time difference is only 1 millis.
            </remarks>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsEqualToIgnoringSeconds(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same year, month, day, hour and minute fields,
            (Seconds and millisecond fields are ignored in comparison).
            <code>
            check can fail with DateTimes in same chronological second time window, e.g :
            2000-01-01T00:<b>01:00</b>.000 and 2000-01-01T00:<b>00:59</b>.000.
            check fails as minute fields differ even if time difference is only 1s.
            </code>
            Code example :
            <code>
                // successfull checks
                DateTime dateTime1 = new DateTime(2000, 1, 1, 23, 50, 0, 0);
                DateTime dateTime2 = new DateTime(2000, 1, 1, 23, 50, 10, 456);
                Check.That(dateTime1).IsEqualToIgnoringSeconds(dateTime2);
                // failing checks (even if time difference is only 1ms)
                DateTime dateTimeA = new DateTime(2000, 1, 1, 23, 50, 00, 000);
                DateTime dateTimeB = new DateTime(2000, 1, 1, 23, 49, 59, 999);
                Check.That(dateTimeA).IsEqualToIgnoringSeconds(dateTimeB);
            </code>
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time is not equal to the given one with second and millisecond fields ignored.</exception>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsEqualToIgnoringMinutes(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same year, month, day and hour fields,
            (Minutes, seconds and millisecond fields are ignored in comparison).
            <code>
            check can fail with dateTimes in same chronological second time window, e.g :
            2000-01-01T<b>01:00</b>:00.000 and 2000-01-01T<b>00:59:59</b>.000.
            Time difference is only 1s but hour fields differ.
            </code>
            Code example :
            <code>
                // successfull checks
                DateTime dateTime1 = new DateTime(2000, 1, 1, 23, 50, 0, 0);
                DateTime dateTime2 = new DateTime(2000, 1, 1, 23, 00, 2, 7);
                Check.That(dateTime1).IsEqualToIgnoringMinutes(dateTime2);
                // failing checks (even if time difference is only 1ms)
                DateTime dateTimeA = new DateTime(2000, 1, 1, 01, 00, 00, 000);
                DateTime dateTimeB = new DateTime(2000, 1, 1, 00, 59, 59, 999);
                Check.That(dateTimeA).IsEqualToIgnoringMinutes(dateTimeB);
            </code>
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time is not equal to the given one with minute, second and millisecond fields ignored.</exception>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsEqualToIgnoringHours(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same year, month and day fields,
            * (Hours, minutes, seconds and millisecond fields are ignored in comparison).
            * <code>
            check can fail with dateTimes in same chronological minute time window, e.g :
            2000-01-<b>01T23:59</b>:00.000 and 2000-01-02T<b>00:00</b>:00.000.
            Time difference is only 1min but day fields differ.
            </code>
            Code example :
            <code>
                // successfull checks
                DateTime dateTime1 = new DateTime(2000, 1, 1, 23, 59, 59, 999);
                DateTime dateTime2 = new DateTime(2000, 1, 1, 00, 00, 00, 000);
                CheckThat(dateTime1).IsEqualToIgnoringHours(dateTime2);
                // failing checks (even if time difference is only 1ms)
                DateTime dateTimeA = new DateTime(2000, 1, 2, 00, 00, 00, 000);
                DateTime dateTimeB = new DateTime(2000, 1, 1, 23, 59, 59, 999);
                CheckThat(dateTimeA).IsEqualToIgnoringHours(dateTimeB);
            </code>
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time is not equal to the given one with hour, minute, second and millisecond fields ignored.</exception>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsInSameYearAs(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same year.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time year is not equal to the given year.</exception>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsInSameMonthAs(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same month, whatever the year.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time month is not equal to the given month, whatever the year.</exception>
        </member>
        <member name="M:NFluent.DateTimeCheckExtensions.IsInSameDayAs(NFluent.ICheck{System.DateTime},System.DateTime)">
            <summary>
            Checks that actual and given DateTime have same day, whatever the year or the month.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="other">The other DateTime.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked date time day is not equal to the given day, whatever the year or the month.</exception>
        </member>
        <member name="T:NFluent.DictionaryCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Collections.IDictionary"/> value.
            </summary>
        </member>
        <member name="M:NFluent.DictionaryCheckExtensions.ContainsKey``1(NFluent.ICheck{System.Collections.IDictionary},``0)">
            <summary>
            Checks that the actual <see cref="T:System.Collections.IDictionary"/> contains the expected key.
            </summary>
            <typeparam name="K">
            The type of the key element.
            </typeparam>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="key">
            The expected key value.
            </param>
            <returns>
            A check link.
            </returns>
        </member>
        <member name="M:NFluent.DictionaryCheckExtensions.ContainsValue``1(NFluent.ICheck{System.Collections.IDictionary},``0)">
            <summary>
            Checks that the actual <see cref="T:System.Collections.IDictionary"/> contains the expected value.
            </summary>
            <typeparam name="K">
            The type of the key element.
            </typeparam>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="expectedValue">
            The expected value.
            </param>
            <returns>
            A check link.
            </returns>
        </member>
        <member name="T:NFluent.DoubleSpecificCheckExtensions">
            <summary>
            Provides specific check methods to be executed on an <see cref="T:System.Double"/> value.
            </summary>
        </member>
        <member name="M:NFluent.DoubleSpecificCheckExtensions.IsNaN(NFluent.ICheck{System.Double})">
            <summary>
            Determines whether the specified number evaluates to a value that is not a number (NaN).
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is a number.</exception>
        </member>
        <member name="M:NFluent.DoubleSpecificCheckExtensions.IsFinite(NFluent.ICheck{System.Double})">
            <summary>
            Determines whether the specified number evaluates to a value that is finite (i.e. not infinity).
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The specified number evaluates to a value that is infinite (i.e. equals to infinity).</exception>
        </member>
        <member name="T:NFluent.EnumerableCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Collections.IEnumerable"/> value.
            </summary>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.Contains``1(NFluent.ICheck{System.Collections.IEnumerable},``0[])">
            <summary>
            Checks that the enumerable contains all the given expected values, in any order.
            </summary>
            <typeparam name="T">Type of the elements contained in the enumerable.</typeparam>
            <param name="check">The fluent check to be extended.</param>
            <param name="expectedValues">The expected values to be found.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The enumerable does not contain all the expected values.</exception>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.Contains(NFluent.ICheck{System.Collections.IEnumerable},System.Collections.IEnumerable)">
            <summary>
            Checks that the enumerable contains all the values present in another enumerable, in any order.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="otherEnumerable">The enumerable containing the expected values to be found.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The enumerable does not contain all the expected values present in the other enumerable.</exception>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.IsOnlyMadeOf``1(NFluent.ICheck{System.Collections.IEnumerable},``0[])">
            <summary>
            Checks that the enumerable contains only the given values and nothing else, in any order.
            Note: this check succeeded with empty value.
            </summary>
            <typeparam name="T">Type of the expected values to be found.</typeparam>
            <param name="check">The fluent check to be extended.</param>
            <param name="expectedValues">The expected values to be found.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The enumerable does not contain only the expected values provided.</exception>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.IsOnlyMadeOf(NFluent.ICheck{System.Collections.IEnumerable},System.Collections.IEnumerable)">
            <summary>
            Checks that the enumerable contains only the values present in another enumerable, and nothing else, in any order.
            Note: this check succeeded with empty value.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expectedValues">The expected values to be found.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The enumerable does not contain only the expected values present in the other enumerable.</exception>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.ContainsExactly``1(NFluent.ICheck{System.Collections.IEnumerable},``0[])">
            <summary>
            Checks that the enumerable contains only the given expected values and nothing else, in order.
            This check should only be used with IEnumerable that have a consistent iteration order
            (i.e. don't use it with Hashtable, prefer <see cref="M:NFluent.EnumerableCheckExtensions.IsOnlyMadeOf``1(NFluent.ICheck{System.Collections.IEnumerable},``0[])"/> in that case).
            </summary>
            <typeparam name="T">Type of the elements to be found.</typeparam>
            <param name="check">The fluent check to be extended.</param>
            <param name="expectedValues">The expected values to be found.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The enumerable does not contains only the exact given values and nothing else, in order.</exception>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.ContainsExactly(NFluent.ICheck{System.Collections.IEnumerable},System.Collections.IEnumerable)">
            <summary>
            Checks that the enumerable contains only the values of another enumerable and nothing else, in order.
            This check should only be used with IEnumerable that have a consistent iteration order
            (i.e. don't use it with Hashtable, prefer <see cref="M:NFluent.EnumerableCheckExtensions.IsOnlyMadeOf``1(NFluent.ICheck{System.Collections.IEnumerable},``0[])"/> in that case).
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="otherEnumerable">The other enumerable containing the exact expected values to be found.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The enumerable does not contains only the exact given values and nothing else, in order.</exception>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.HasSize(NFluent.ICheck{System.Collections.IEnumerable},System.Int64)">
            <summary>
            Checks that the enumerable has the proper number of elements.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expectedSize">The expected size to be found.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The enumerable has not the expected number of elements.</exception>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.IsEmpty(NFluent.ICheck{System.Collections.IEnumerable})">
            <summary>
            Checks that the enumerable is empty.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The enumerable is not empty.</exception>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.IsNullOrEmpty(NFluent.ICheck{System.Collections.IEnumerable})">
            <summary>
            Checks that the enumerable is null or empty.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The enumerable is not empty.</exception>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.ExtractNotFoundValues(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Returns all expected values that aren't present in the enumerable.
            </summary>
            <param name="enumerable">The enumerable to inspect.</param>
            <param name="expectedValues">The expected values to search within the enumerable.</param>
            <returns>
            A list containing all the expected values that aren't present in the enumerable.
            </returns>
        </member>
        <member name="M:NFluent.EnumerableCheckExtensions.ExtractUnexpectedValues(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Returns all the values of the enumerable that don't belong to the expected ones.
            </summary>
            <param name="enumerable">The enumerable to inspect.</param>
            <param name="expectedValues">The allowed values to be part of the enumerable.</param>
            <returns>
            A list with all the values found in the enumerable that don't belong to the expected ones.
            </returns>
        </member>
        <member name="T:NFluent.EnumerableFluentSyntaxExtension">
            <summary>
            Provides extension method on a ICheckLink for IEnumerable types.
            </summary>
        </member>
        <member name="M:NFluent.EnumerableFluentSyntaxExtension.Only(NFluent.IExtendableCheckLink{System.Collections.IEnumerable})">
            <summary>
            Checks that the checked <see cref="T:System.Collections.IEnumerable"/> contains only the authorized items. Can only be used after a call to Contains.
            </summary>
            <param name="chainedCheckLink">
            The chained fluent check.
            </param>
            <returns>
            A check link.
            </returns>
        </member>
        <member name="M:NFluent.EnumerableFluentSyntaxExtension.Once(NFluent.IExtendableCheckLink{System.Collections.IEnumerable})">
            <summary>
            Checks that the checked <see cref="T:System.Collections.IEnumerable"/> contains the expected list of items only once.
            </summary>
            <param name="chainedCheckLink">
            The chained fluent check.
            </param>
            <returns>
            A check link.
            </returns>
        </member>
        <member name="M:NFluent.EnumerableFluentSyntaxExtension.InThatOrder(NFluent.IExtendableCheckLink{System.Collections.IEnumerable})">
            <summary>
            Checks that the checked <see cref="T:System.Collections.IEnumerable"/> contains items in the expected order.
            </summary>
            <param name="chainedCheckLink">
            The chained fluent check.
            </param>
            <returns>
            A check link.
            </returns>
        </member>
        <member name="T:NFluent.EventWaitHandleCheckExtensions">
            <summary>
            Provides check methods to be executed on a <see cref="T:System.Threading.EventWaitHandle"/> instance.
            </summary>
        </member>
        <member name="M:NFluent.EventWaitHandleCheckExtensions.IsSetWithin(NFluent.ICheck{System.Threading.EventWaitHandle},System.Double,NFluent.TimeUnit)">
            <summary>
            Checks that the event is set within a given timeout.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="timeOut">The maximum amount of time before the event should be set (time unit being specified with the timeUnit parameter).</param>
            <param name="timeUnit">The time unit of the given timeOut.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The event was not set before the given timeout.</exception>
        </member>
        <member name="M:NFluent.EventWaitHandleCheckExtensions.IsNotSetWithin(NFluent.ICheck{System.Threading.EventWaitHandle},System.Double,NFluent.TimeUnit)">
            <summary>
            Checks that the event is not set within a given timeout.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="timeOut">The maximum amount of time before the event should not be set (time unit being specified with the timeUnit parameter).</param>
            <param name="timeUnit">The time unit of the given timeOut.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The event was set before the given timeout.</exception>
        </member>
        <member name="T:NFluent.ExtendableCheckLink`2">
            <summary>
            Provides an specific implementation for IEnumerable fluent check. Required to implement IEnumerable fluent API.
            </summary>
            <typeparam name="T">
            Type managed by this extension.
            </typeparam>
            <typeparam name="U">Type of the reference comparand.</typeparam>
        </member>
        <member name="T:NFluent.CheckLink`1">
            <summary>
            Provides a way to chain two <see cref="T:NFluent.IForkableCheck"/> instances. 
            </summary>
            <typeparam name="T">Type of the <see cref="T:NFluent.IForkableCheck"/> to be chained.</typeparam>
        </member>
        <member name="T:NFluent.ICheckLink`1">
            <summary>
            Provides a way to chain two <see cref="T:NFluent.IForkableCheck"/> instances. 
            </summary>
            <typeparam name="T">Type of the <see cref="T:NFluent.IForkableCheck"/> to be chained.</typeparam>
        </member>
        <member name="P:NFluent.ICheckLink`1.And">
            <summary>
            Chains a new fluent check to the current one.
            </summary>
            <value>
            The new fluent check instance which has been chained to the previous one.
            </value>
        </member>
        <member name="M:NFluent.CheckLink`1.#ctor(NFluent.IMustImplementIForkableCheckWithoutDisplayingItsMethodsWithinIntelliSense)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.CheckLink`1"/> class.
            </summary>
            <param name="previousCheck">The previous fluent check.</param>
        </member>
        <member name="P:NFluent.CheckLink`1.And">
            <summary>
            Links a new fluent check to the current one.
            </summary>
            <value>
            The new fluent check instance which has been linked to the previous one.
            </value>
        </member>
        <member name="T:NFluent.IExtendableCheckLink`2">
            <summary>
            Provides an specific implementation for IEnumerable fluent check extension. Required to implement IEnumerable fluent API syntax.
            </summary>
            <typeparam name="T">Type managed by this extension.</typeparam>
            <typeparam name="U">Type of the reference comparand.</typeparam>
        </member>
        <member name="P:NFluent.IExtendableCheckLink`2.OriginalComparand">
            <summary>
            Gets the initial list that was used in Contains.
            </summary>
            <value>
            Initial list that was used in Contains.
            </value>
        </member>
        <member name="M:NFluent.ExtendableCheckLink`2.#ctor(NFluent.IMustImplementIForkableCheckWithoutDisplayingItsMethodsWithinIntelliSense,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.ExtendableCheckLink`2"/> class. 
            </summary>
            <param name="previousCheck">
            The previous fluent check.
            </param>
            <param name="originalComparand">
            Comparand used for the first check.
            </param>
        </member>
        <member name="P:NFluent.ExtendableCheckLink`2.OriginalComparand">
            <summary>
            Gets the initial list that was used in Contains.
            </summary>
            <exception cref="T:System.NotImplementedException">
            Temporary to bi completed.
            </exception>
            <value>
            Initial list that was used in Contains.
            </value>
        </member>
        <member name="T:NFluent.ExtendableCheckLink`1">
            <summary>
            Provides an specific implementation for IEnumerable fluent check. Required to implement IEnumerable fluent API.
            </summary>
            <typeparam name="T">
            Type managed by this extension.
            </typeparam>
        </member>
        <member name="T:NFluent.IExtendableCheckLink`1">
            <summary>
            Provides an specific implementation for IEnumerable fluent check extension. Required to implement IEnumerable fluent API syntax.
            </summary>
            <typeparam name="T">
            Type managed by this extension.
            </typeparam>
        </member>
        <member name="P:NFluent.IExtendableCheckLink`1.OriginalComparand">
            <summary>
            Gets the initial list that was used in Contains.
            </summary>
            <value>
            Initial list that was used in Contains.
            </value>
        </member>
        <member name="M:NFluent.ExtendableCheckLink`1.#ctor(NFluent.IMustImplementIForkableCheckWithoutDisplayingItsMethodsWithinIntelliSense,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.ExtendableCheckLink`1"/> class. 
            </summary>
            <param name="previousCheck">
            The previous fluent check.
            </param>
            <param name="originalComparand">
            Comparand used for the first check.
            </param>
        </member>
        <member name="T:NFluent.IntCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Int32"/> value.
            </summary>
        </member>
        <member name="M:NFluent.IntCheckExtensions.IsBefore(NFluent.ICheck{System.Int32},System.Int32)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.IntCheckExtensions.IsAfter(NFluent.ICheck{System.Int32},System.Int32)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.IntCheckExtensions.IsZero(NFluent.ICheck{System.Int32})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.IntCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.Int32}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.IntCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.Int32}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.IntCheckExtensions.IsNotZero(NFluent.ICheck{System.Int32})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.IntCheckExtensions.IsLessThan(NFluent.ICheck{System.Int32},System.Int32)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.IntCheckExtensions.IsGreaterThan(NFluent.ICheck{System.Int32},System.Int32)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="T:NFluent.IntSignedCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Int32"/> value that is considered as a signed number.
            </summary>
        </member>
        <member name="M:NFluent.IntSignedCheckExtensions.IsPositive(NFluent.ICheck{System.Int32})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.IntSignedCheckExtensions.IsNegative(NFluent.ICheck{System.Int32})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="T:NFluent.LambdaCheck">
            <summary>
            Implements lambda/action specific check.
            </summary>
        </member>
        <member name="T:NFluent.ILambdaCheck">
            <summary>
            Provides lambda/action specific check.
            </summary>
        </member>
        <member name="T:NFluent.IMustImplementIForkableCheckWithoutDisplayingItsMethodsWithinIntelliSense">
            <summary>
            Marker interface indicating that the implementations should implement the <see cref="T:NFluent.IForkableCheck"/> interface.
            This is a 'trick' so that the <see cref="T:NFluent.IForkableCheck"/> methods don't appeared in the user Intellisense.
            </summary>
        </member>
        <member name="M:NFluent.ILambdaCheck.LastsLessThan(System.Double,NFluent.TimeUnit)">
            <summary>
            Checks that the execution time is below a specified threshold.
            </summary>
            <param name="threshold">The threshold.</param>
            <param name="timeUnit">The time unit of the given threshold.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">Execution was strictly above limit.</exception>
        </member>
        <member name="M:NFluent.ILambdaCheck.DoesNotThrow">
            <summary>
            Check that the code does not throw an exception.
            </summary>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The code raised an exception.</exception>
        </member>
        <member name="M:NFluent.ILambdaCheck.Throws``1">
            <summary>
            Checks that the code did throw an exception of a specified type.
            </summary>
            <typeparam name="T">And.Expected exception type.</typeparam>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The code did not raised an exception of the specified type, or did not raised an exception at all.</exception>
        </member>
        <member name="M:NFluent.ILambdaCheck.ThrowsAny">
            <summary>
            Checks that the code did throw an exception of any type.
            </summary>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The code did not raised an exception of any type.</exception>
        </member>
        <member name="T:NFluent.IForkableCheck">
            <summary>
            Fluent check which is able to be forked. An check fork is like an check clone where the 
            'Negated' property is always set to false. This interface is mandatory for the check link mechanism. 
            </summary>
            <remarks>
                The .NET standard ICloneable interface is not used here since it doesn't 
                support and include the 'Negated' property value reset.
            </remarks>
        </member>
        <member name="M:NFluent.IForkableCheck.ForkInstance">
            <summary>
            Creates a new instance of the same fluent check type, injecting the same Value property 
            (i.e. the system under test), but with a false Negated property in any case.
            </summary>
            <remarks>This method is used during the chaining of multiple checks.</remarks>
            <returns>A new instance of the same fluent check type, with the same Value property.</returns>
        </member>
        <member name="M:NFluent.LambdaCheck.#ctor(System.Delegate)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.LambdaCheck"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:NFluent.LambdaCheck.#ctor(NFluent.RunTrace)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.LambdaCheck"/> class.
            </summary>
            <param name="runTrace">Trace of the initial run.
            </param>
        </member>
        <member name="M:NFluent.LambdaCheck.ForkInstance">
            <summary>
            Creates a new instance of the same fluent check type, injecting the same Value property
            (i.e. the system under test), but with a false Negated property in any case.
            </summary>
            <returns>
            A new instance of the same fluent check type, with the same Value property.
            </returns>
            <remarks>
            This method is used during the chaining of multiple checks.
            </remarks>
        </member>
        <member name="M:NFluent.LambdaCheck.DoesNotThrow">
            <summary>
            Check that the code does not throw an exception.
            </summary>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The code raised an exception.
            </exception>
        </member>
        <member name="M:NFluent.LambdaCheck.LastsLessThan(System.Double,NFluent.TimeUnit)">
            <summary>
            Checks that the execution time is below a specified threshold.
            </summary>
            <param name="threshold">
            The threshold.
            </param>
            <param name="timeUnit">
            The time unit of the given threshold.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            Execution was strictly above limit.
            </exception>
        </member>
        <member name="M:NFluent.LambdaCheck.Throws``1">
            <summary>
            Checks that the code did throw an exception of a specified type.
            </summary>
            <typeparam name="T">
            And.Expected exception type.
            </typeparam>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The code did not raised an exception of the specified type, or did not raised an exception at all.
            </exception>
        </member>
        <member name="M:NFluent.LambdaCheck.ThrowsAny">
            <summary>
            Checks that the code did throw an exception of any type.
            </summary>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The code did not raised an exception of any type.
            </exception>
        </member>
        <member name="T:NFluent.LambdaExceptionCheck`1">
            <summary>
            Implements specific Value check after lambda checks.
            </summary>
            <typeparam name="T">Code checker type./>.
            </typeparam>
        </member>
        <member name="T:NFluent.ILambdaExceptionCheck`1">
            <summary>
            Provides check methods to be executed on the exception raised by a given lambda/action.
            </summary>
            <typeparam name="TParent">The type of the parent.</typeparam>
        </member>
        <member name="T:NFluent.IHasParentCheck`1">
            <summary>
            A contract to force the type of the expected parent.
            </summary>
            <typeparam name="TParent">The type of the parent.</typeparam>
        </member>
        <member name="M:NFluent.ILambdaExceptionCheck`1.WithMessage(System.String)">
            <summary>
            Checks that the message of the considered exception is correctly written.
            </summary>
            <param name="exceptionMessage">The expected exception message.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The code did not raised an exception of any type.</exception>
        </member>
        <member name="M:NFluent.ILambdaExceptionCheck`1.WithProperty(System.String,System.Object)">
            <summary>
            Checks that a specific property of the considered exception has an expected value.
            </summary>
            <param name="propertyName">The name of the property to check on the considered exception.</param>
            <param name="propertyValue">The expected value for the property to check on the considered exception.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The code did not raised an exception of any type.</exception>
        </member>
        <member name="M:NFluent.LambdaExceptionCheck`1.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.LambdaExceptionCheck`1"/> class.
            This check can only be fluently called after a lambda check.
            </summary>
            <param name="value">The Value.</param>
        </member>
        <member name="M:NFluent.LambdaExceptionCheck`1.WithMessage(System.String)">
            <summary>
            Checks that the message of the considered Value is correctly written.
            </summary>
            <param name="exceptionMessage">The expected Value message.</param>
            <returns>
            A check link.
            </returns>
            <Value cref="T:NFluent.FluentCheckException">The code did not raised an Value of any type.</Value>
        </member>
        <member name="M:NFluent.LambdaExceptionCheck`1.WithProperty(System.String,System.Object)">
            <summary>
            Checks that a specific property of the considered Value has an expected value.
            </summary>
            <param name="propertyName">The name of the property to check on the considered Value.</param>
            <param name="propertyValue">The expected value for the property to check on the considered Value.</param>
            <returns>
            A check link.
            </returns>
            <Value cref="T:NFluent.FluentCheckException">The code did not raised an Value of any type.</Value>
        </member>
        <member name="M:NFluent.LambdaExceptionCheck`1.ForkInstance">
            <summary>
            Creates a new instance of the same fluent check type, injecting the necessary properties
            (i.e. the system under test), but with a false Negated property in any case.
            </summary>
            <returns>
            A new instance of the same fluent check type, with the same properties (including the Value one).
            </returns>
            <remarks>
            This method is used during the chaining of multiple checks.
            </remarks>
        </member>
        <member name="P:NFluent.LambdaExceptionCheck`1.Value">
            <summary>
            Gets or sets with the parent class that fluently called this one.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:NFluent.NumberCheck`1">
            <summary>
            Provides check methods to be executed on a number instance.
            </summary>
            <typeparam name="N">Type of the numerical value.</typeparam>
        </member>
        <member name="M:NFluent.NumberCheck`1.#ctor(NFluent.ICheck{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.NumberCheck`1"/> class.
            </summary>
            <param name="check">The fluent check.</param>
        </member>
        <member name="M:NFluent.NumberCheck`1.IsZero">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.NumberCheck`1.IsNotZero">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <returns>
            <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.NumberCheck`1.IsPositive">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.NumberCheck`1.IsNegative">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.NumberCheck`1.IsLessThan(`0)">
            <summary>
            Checks that the actual value is less than a comparand.
            </summary>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.NumberCheck`1.IsGreaterThan(`0)">
            <summary>
            Checks that the actual value is more than a comparand.
            </summary>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.NumberCheck`1.InternalIsZero(`0)">
            <summary>
            Checks whether a given value is equal to zero.
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the specified value is equal to zero; false otherwise.
            </returns>
        </member>
        <member name="T:NFluent.ObjectCheckExtensions">
            <summary>
            Provides check methods to be executed on an object instance.
            </summary>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsEqualTo``1(NFluent.ICheck{``0},System.Object)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="expected">
            The expected value.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The actual value is not equal to the expected value.
            </exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsEqualTo``1(NFluent.ICheck{``0},``0)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="expected">
            The expected value.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The actual value is not equal to the expected value.
            </exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsNotEqualTo``1(NFluent.ICheck{``0},System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsNotEqualTo``1(NFluent.ICheck{``0},``0)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.InheritsFrom``1(NFluent.ICheck{System.Object})">
            <summary>
            Checks that the actual expression is in the inheritance hierarchy of the given kind or of the same kind.
            </summary>
            <typeparam name="T">The Type which is expected to be a base Type of the actual expression.</typeparam>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The checked expression is not in the inheritance hierarchy of the given kind.</exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsNull``1(NFluent.ICheck{``0})">
            <summary>
            Checks that the actual expression is null.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked value is not null.</exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsNull``1(NFluent.ICheck{System.Nullable{``0}})">
            <summary>
            Checks that the actual Nullable value is null.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked value is not null.</exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsNotNull``1(NFluent.ICheck{System.Nullable{``0}})">
            <summary>
            Checks that the actual Nullable value is not null.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The checked value is null.</exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsNotNull``1(NFluent.ICheck{``0})">
            <summary>
            Checks that the actual expression is not null.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">Is the value is null.</exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsSameReferenceThan``1(NFluent.ICheck{``0},System.Object)">
            <summary>
            Checks that the actual value has an expected reference.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected object.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not the same reference than the expected value.</exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.IsDistinctFrom``1(NFluent.ICheck{``0},System.Object)">
            <summary>
            Checks that the actual value is a different instance than a comparand.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <param name="check">The fluent check to be extended.</param>
            <param name="comparand">The expected value to be distinct from.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is the same instance than the comparand.</exception>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.HasFieldsWithSameValues``1(NFluent.ICheck{``0},System.Object)">
            <summary>
            Checks that the actual value has fields equals to the expected value ones.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value doesn't have all fields equal to the expected value ones.</exception>
            <remarks>
            The comparison is done field by field.
            </remarks>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.HasFieldsEqualToThose(NFluent.ICheck{System.Object},System.Object)">
            <summary>
            Checks that the actual value has fields equals to the expected value ones.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value doesn't have all fields equal to the expected value ones.</exception>
            <remarks>The comparison is done field by field.</remarks>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.HasNotFieldsWithSameValues``1(NFluent.ICheck{``0},System.Object)">
            <summary>
            Checks that the actual value doesn't have all fields equal to the expected value ones.
            </summary>
            <typeparam name="T">
            Type of the checked value.
            </typeparam>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value has all fields equal to the expected value ones.</exception>
            <remarks>
            The comparison is done field by field.
            </remarks>
        </member>
        <member name="M:NFluent.ObjectCheckExtensions.HasFieldsNotEqualToThose(NFluent.ICheck{System.Object},System.Object)">
            <summary>
            Checks that the actual value doesn't have all fields equal to the expected value ones.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value has all fields equal to the expected value ones.</exception>
            <remarks>The comparison is done field by field.</remarks>
        </member>
        <member name="T:NFluent.ObjectCheckExtensions.FieldKind">
            <summary>
            Kind of field (whether normal, generated by an auto-property, an anonymous class, etc.
            </summary>
        </member>
        <member name="F:NFluent.ObjectCheckExtensions.FieldKind.Normal">
            <summary>
            Normal field.
            </summary>
        </member>
        <member name="F:NFluent.ObjectCheckExtensions.FieldKind.AutoProperty">
            <summary>
            Field generated by an auto-property.
            </summary>
        </member>
        <member name="F:NFluent.ObjectCheckExtensions.FieldKind.AnonymousClass">
            <summary>
            Field generated by an anonymous class.
            </summary>
        </member>
        <member name="T:NFluent.StringCheckExtensions">
            <summary>
            Provides check methods to be executed on a string instance.
            </summary>
        </member>
        <member name="M:NFluent.StringCheckExtensions.IsEqualTo(NFluent.ICheck{System.String},System.Object)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.IsEqualTo(NFluent.ICheck{System.String},System.String)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.IsNotEqualTo(NFluent.ICheck{System.String},System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.IsNotEqualTo(NFluent.ICheck{System.String},System.String)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.IsOneOfThese(NFluent.ICheck{System.String},System.String[])">
            <summary>
            Checks that the actual value is one of these possible elements.
            </summary>
            <param name="check">The check.</param>
            <param name="possibleElements">The possible elements.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is NOT one of the elements.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.Contains(NFluent.ICheck{System.String},System.String[])">
            <summary>
            Checks that the string contains the given expected values, in any order.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="values">The expected values to be found.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string  contains all the given strings in any order.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.DoesNotContain(NFluent.ICheck{System.String},System.String[])">
            <summary>
            Checks that the string does not contain any of the given expected values.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="values">The values not to be present.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string contains at least one of the given strings.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.HighlightFirstCrlfOrLfIfAny(System.String,System.Int32)">
            <summary>
            Inserts &lt;&lt;CRLF&gt;&gt; before the first CRLF or &lt;&lt;LF&gt;&gt; before the first LF.
            </summary>
            <param name="str">The string.</param>
            <param name="firstDiffPos">The first difference position.</param>
            <returns>The same string but with &lt;&lt;CRLF&gt;&gt; inserted before the first CRLF or &lt;&lt;LF&gt;&gt; inserted before the first LF.</returns>
        </member>
        <member name="M:NFluent.StringCheckExtensions.HighlightTabsIfAny(System.String)">
            <summary>
            Replace every tab char by "&lt;&lt;tab&gt;&gt;".
            </summary>
            <param name="str">The original string.</param>
            <returns>The original string with every \t replaced with "&lt;&lt;tab&gt;&gt;".</returns>
        </member>
        <member name="M:NFluent.StringCheckExtensions.StartsWith(NFluent.ICheck{System.String},System.String)">
            <summary>
            Checks that the string starts with the given expected prefix.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expectedPrefix">The expected prefix.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string does not start with the expected prefix.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.EndsWith(NFluent.ICheck{System.String},System.String)">
            <summary>
            Checks that the string ends with the given expected suffix.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="expectedEnd">The expected suffix.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string does not end with the expected prefix.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.Matches(NFluent.ICheck{System.String},System.String)">
            <summary>
            Checks that the string matches a given regular expression.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="regExp">The regular expression.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string does not end with the expected prefix.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.DoesNotMatch(NFluent.ICheck{System.String},System.String)">
            <summary>
            Checks that the string does not match a given regular expression.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="regExp">The regular expression prefix.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string does not end with the expected prefix.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.IsEmpty(NFluent.ICheck{System.String})">
            <summary>
            Checks that the string is empty.
            </summary>
            <param name="check">The fluent check.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string is not empty.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.IsNullOrEmpty(NFluent.ICheck{System.String})">
            <summary>
            Checks that the string is empty or null.
            </summary>
            <param name="check">The fluent check.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string is neither empty or null.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.IsNotEmpty(NFluent.ICheck{System.String})">
            <summary>
            Checks that the string is not empty.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string is empty.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.HasContent(NFluent.ICheck{System.String})">
            <summary>
            Checks that the string has content.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string is empty or null.</exception>
        </member>
        <member name="M:NFluent.StringCheckExtensions.IsEqualIgnoringCase(NFluent.ICheck{System.String},System.String)">
            <summary>
            Checks that the string is equals to another one, disregarding case.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="comparand">The string to compare to.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The string is not equal to the comparand.</exception>
        </member>
        <member name="T:NFluent.StringFluentSyntaxExtension">
            <summary>
            Provides extension method on a ICheckLink for IEnumerable types.
            </summary>
        </member>
        <member name="M:NFluent.StringFluentSyntaxExtension.Once(NFluent.IExtendableCheckLink{System.String,System.String[]})">
            <summary>
            Checks that the checked <see cref="T:System.String"/> contains the expected list of strings only once.
            </summary>
            <param name="chainedCheckLink">
            The chained fluent check.
            </param>
            <returns>
            A check link.
            </returns>
        </member>
        <member name="M:NFluent.StringFluentSyntaxExtension.InThatOrder(NFluent.IExtendableCheckLink{System.String,System.String[]})">
            <summary>
            Checks that the checked <see cref="T:System.String"/> contains the expected list of strings in the correct order.
            </summary>
            <param name="chainedCheckLink">
            The chained fluent check.
            </param>
            <returns>
            A check link.
            </returns>
        </member>
        <member name="T:NFluent.StructCheckExtensions">
            <summary>
            Provides check methods to be executed on an struct instance.
            </summary>
        </member>
        <member name="M:NFluent.StructCheckExtensions.IsEqualTo``1(NFluent.IStructCheck{``0},``0)">
            <summary>
            Checks that the actual value is equal to another expected value.
            </summary>
            <typeparam name="T">Type of the struct or the enum to assert on.</typeparam>
            <param name="check">The fluent fluent check.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.StructCheckExtensions.IsNotEqualTo``1(NFluent.IStructCheck{``0},System.Object)">
            <summary>
            Checks that the actual value is not equal to another expected value.
            </summary>
            <typeparam name="T">Type of the struct or the enum to assert on.</typeparam>
            <param name="check">The fluent check to be extended.</param>
            <param name="expected">The expected value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is equal to the expected value.</exception>
        </member>
        <member name="T:NFluent.TimeSpanCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.TimeSpan"/> instance.
            </summary>
        </member>
        <member name="M:NFluent.TimeSpanCheckExtensions.IsLessThan(NFluent.ICheck{System.TimeSpan},System.Double,NFluent.TimeUnit)">
            <summary>
            Checks that the actual duration is less (strictly) than a comparand.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="providedDuration">The duration to compare to.</param>
            <param name="unit">The unit in which the duration is expressed.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not less than the provided duration.</exception>
        </member>
        <member name="M:NFluent.TimeSpanCheckExtensions.IsLessThan(NFluent.ICheck{System.TimeSpan},System.TimeSpan)">
            <summary>
            Checks that the actual duration is less (strictly) than a comparand.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="comparand">The value to compare to.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not less than the provided comparand.</exception>
        </member>
        <member name="M:NFluent.TimeSpanCheckExtensions.IsGreaterThan(NFluent.ICheck{System.TimeSpan},System.Double,NFluent.TimeUnit)">
            <summary>
            Checks that the actual duration is greater (strictly) than a comparand.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="providedDuration">The duration to compare to.</param>
            <param name="unit">The unit in which the duration is expressed.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not greater than the provided comparand.</exception>
        </member>
        <member name="M:NFluent.TimeSpanCheckExtensions.IsGreaterThan(NFluent.ICheck{System.TimeSpan},System.TimeSpan)">
            <summary>
            Checks that the actual duration is greater (strictly) than a comparand.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="comparand">The value to compare to.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not greater than the provided comparand.</exception>
        </member>
        <member name="M:NFluent.TimeSpanCheckExtensions.IsEqualTo(NFluent.ICheck{System.TimeSpan},System.Double,NFluent.TimeUnit)">
            <summary>
            Checks that the actual duration is equal to a target duration.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="duration">The duration to be compared to.</param>
            <param name="unit">The <see cref="T:NFluent.TimeUnit"/> in which duration is expressed.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not equal to the target duration.</exception>
        </member>
        <member name="M:NFluent.TimeSpanCheckExtensions.IsEqualTo(NFluent.ICheck{System.TimeSpan},System.TimeSpan)">
            <summary>
            Checks that the actual duration is equal to a target duration.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="comparand">The duration to be compared to.</param>
            <returns>A check link.</returns>
            /// <exception cref="T:NFluent.FluentCheckException">The actual value is not equal to the target duration.</exception>
        </member>
        <member name="T:NFluent.Check">
            <summary>
            Provides <see cref="T:NFluent.ICheck`1"/> instances to be used in order to make 
            check(s) on the provided value.
            </summary>
        </member>
        <member name="M:NFluent.Check.That``1(``0)">
            <summary>
            Returns a <see cref="T:NFluent.ICheck`1"/> instance that will provide check methods to be executed on a given value.
            </summary>
            <typeparam name="T">Type of the value to be tested.</typeparam>
            <param name="value">The value to be tested.</param>
            <returns>
            A <see cref="T:NFluent.ICheck`1"/> instance to use in order to check things on the given value.
            </returns>
            <remarks>
            Every method of the returned <see cref="T:NFluent.ICheck`1"/> instance will throw a <see cref="T:NFluent.FluentCheckException"/> when failing.
            </remarks>
        </member>
        <member name="M:NFluent.Check.ThatAsyncCode(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Returns a <see cref="T:NFluent.ICheck`1"/> instance that will provide check methods to be executed on a given async code (returning Task).
            </summary>
            <param name="awaitableMethod">The async code to be tested.</param>
            <returns>
            A <see cref="T:NFluent.ICheck`1"/> instance to use in order to assert things on the given value.
            </returns>
            <remarks>
            Every method of the returned <see cref="T:NFluent.ICheck`1"/> instance will throw a <see cref="T:NFluent.FluentCheckException"/> when failing.
            </remarks>
        </member>
        <member name="M:NFluent.Check.ThatAsyncCode``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Returns a <see cref="T:NFluent.ICheck`1"/> instance that will provide check methods to be executed on a given async function (returning Task{TResult}).
            </summary>
            <typeparam name="TResult">The type of the result for this asynchronous function.</typeparam>
            <param name="awaitableFunction">The asynchronous function to be tested.</param>
            <returns>
            A <see cref="T:NFluent.ICheck`1"/> instance to use in order to assert things on the given value.
            </returns>
            <remarks>
            Every method of the returned <see cref="T:NFluent.ICheck`1"/> instance will throw a <see cref="T:NFluent.FluentCheckException"/> when failing.
            </remarks>
        </member>
        <member name="M:NFluent.Check.That(System.Action)">
            <summary>
            Returns a <see cref="T:NFluent.ICheck`1"/> instance that will provide check methods to be executed on a given value.
            </summary>
            <param name="value">The value to be tested.</param>
            <returns>
            A <see cref="T:NFluent.ILambdaCheck"/> instance to use in order to assert things on the given value.
            </returns>
            <remarks>
            Every method of the returned <see cref="T:NFluent.ICheck`1"/> instance will throw a <see cref="T:NFluent.FluentCheckException"/> when failing.
            </remarks>
        </member>
        <member name="M:NFluent.Check.ThatCode(System.Action)">
            <summary>
            Returns a <see cref="T:NFluent.ICheck`1"/> instance that will provide check methods to be executed on a given value.
            </summary>
            <param name="value">The code to be tested.</param>
            <returns>
            A <see cref="T:NFluent.ICheck`1"/> instance to use in order to assert things on the given value.
            </returns>
            <remarks>
            Every method of the returned <see cref="T:NFluent.ICheck`1"/> instance will throw a <see cref="T:NFluent.FluentCheckException"/> when failing.
            </remarks>
        </member>
        <member name="M:NFluent.Check.ThatCode``1(System.Func{``0})">
            <summary>
            Returns a <see cref="T:NFluent.ICheck`1"/> instance that will provide check methods to be executed on a given value.
            </summary>
            <typeparam name="U">Result type of the function.</typeparam>
            <param name="value">The code to be tested.</param>
            <returns>
            A <see cref="T:NFluent.ICheck`1"/> instance to use in order to assert things on the given value.
            </returns>
            <remarks>
            Every method of the returned <see cref="T:NFluent.ICheck`1"/> instance will throw a <see cref="T:NFluent.FluentCheckException"/> when failing.
            </remarks>
        </member>
        <member name="M:NFluent.Check.That``1(System.Func{``0})">
            <summary>
            Returns a <see cref="T:NFluent.ICheck`1"/> instance that will provide check methods to be executed on a given value.
            </summary>
            <typeparam name="T">Type of the value returned by the <see cref="T:System.Func`1"/> to be checked.</typeparam>
            <param name="value">The value to be tested.</param>
            <returns>
            A <see cref="T:NFluent.LambdaCheck"/> instance to use in order to assert things on the given value.
            </returns>
            <remarks>
            Every method of the returned <see cref="T:NFluent.ICheck`1"/> instance will throw a <see cref="T:NFluent.FluentCheckException"/> when failing.
            </remarks>
        </member>
        <member name="M:NFluent.Check.ThatEnum``1(``0)">
            <summary>
            Returns a <see cref="T:NFluent.IStructCheck`1"/> instance that will provide check methods to be executed on a given enum or struct value.
            </summary>
            <typeparam name="T">Type of the enum or struct value to be tested.</typeparam>
            <param name="value">The value to be tested.</param>
            <returns>
            A <see cref="T:NFluent.IStructCheck`1"/> instance to use in order to assert things on the given enum or struct value.
            </returns>
            <remarks>
            Every method of the returned <see cref="T:NFluent.IStructCheck`1"/> instance will throw a <see cref="T:NFluent.FluentCheckException"/> when failing.
            </remarks>
        </member>
        <member name="T:NFluent.CheckContext">
            <summary>
            Describes default execution context. Used to control context for tests.
            </summary>
        </member>
        <member name="T:NFluent.Constants">
            <summary>
            Holds constant values.
            </summary>
        </member>
        <member name="T:NFluent.Extensibility.Checker`2">
            <summary>
            Provides a mean to execute some checks on a value, taking care of whether it should be negated or not, etc.
            This interface is designed for developers that need to add new check (extension) methods.
            Thus, it should not be exposed via Intellisense to developers that are using NFluent to write 
            checks statements.
            </summary>
            <typeparam name="T">Type of the value to assert on.</typeparam>
            <typeparam name="TC">Check interface.</typeparam>
        </member>
        <member name="T:NFluent.Extensibility.IChecker`2">
            <summary>
            Provides a mean to execute some checks on a value, taking care of whether it should be negated or not, etc.
            This interface is designed for developers that need to add new check (extension) methods.
            Thus, it should not be exposed via Intellisense to developers that are using NFluent to write 
            checks statements.
            </summary>
            <typeparam name="T">
            Type of the value to assert on.
            </typeparam>
            <typeparam name="C">Interface for the check.
            </typeparam>
        </member>
        <member name="T:NFluent.IWithValue`1">
            <summary>
            Exposes a value.
            </summary>
            <typeparam name="T">
            Type of the exposed value.
            </typeparam>
        </member>
        <member name="P:NFluent.IWithValue`1.Value">
            <summary>
            Gets the value to be tested (provided for any extension method to be able to test it).
            </summary>
            <value>
            The value to be tested by any fluent check extension method.
            </value>
        </member>
        <member name="T:NFluent.INegated">
            <summary>
            Indicates whether the fluent check is negated or not.
            </summary>
        </member>
        <member name="P:NFluent.INegated.Negated">
            <summary>
            Gets a value indicating whether this <see cref="T:NFluent.FluentCheck`1"/> should be negated or not.
            This property is useful when you implement check methods. 
            </summary>
            <value>
              <c>true</c> if all the methods applying to this check instance should be negated; <c>false</c> otherwise.
            </value>
        </member>
        <member name="M:NFluent.Extensibility.IChecker`2.ExecuteCheck(System.Action,System.String)">
            <summary>
            Executes the check provided as an happy-path lambda (vs lambda for negated version).
            </summary>
            <param name="action">
                The happy-path action (vs. the one for negated version which has not to be specified). 
                This lambda should simply return if everything is ok, or throws a 
                <see cref="T:NFluent.FluentCheckException"/> otherwise.</param>
            <param name="negatedExceptionMessage">
                The message for the exception to be thrown when the check fails, in the case we were running the negated version.
            </param>
            <returns>
                The <see cref="P:NFluent.Extensibility.IChecker`2.ReturnValueForLinkage"/>.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The check fails.</exception>
        </member>
        <member name="M:NFluent.Extensibility.IChecker`2.ExecuteNotLinkableCheck(System.Action,System.String)">
            <summary>
            Executes the check provided as an happy-path lambda (vs lambda for negated version) and returns a not linkable check.
            </summary>
            <param name="action">The happy-path action (vs. the one for negated version which has not to be specified).
            This lambda should simply return if everything is ok, or throws a
            <see cref="T:NFluent.FluentCheckException"/> otherwise.</param>
            <param name="negatedExceptionMessage">The message for the exception to be thrown when the check fails, in the case we were running the negated version.</param>
            <exception cref="T:NFluent.FluentCheckException">The check fails.</exception>
        </member>
        <member name="P:NFluent.Extensibility.IChecker`2.ReturnValueForLinkage">
            <summary>
            Gets the check link to return for the next check to be executed (linked with the And operator).
            This property is only useful for those that doesn't want to implement their check methods with the 
            <see cref="M:NFluent.Extensibility.IChecker`2.ExecuteCheck(System.Action,System.String)"/> method.
            </summary>
            <value>
            The check link to return for next check (linked with the And operator) to be executed.
            </value>
        </member>
        <member name="M:NFluent.Extensibility.Checker`2.#ctor(NFluent.ICheckForExtensibility{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Extensibility.Checker`2"/> class.
            </summary>
            <param name="fluentCheckForExtensibility">The runnable fluent check.</param>
        </member>
        <member name="M:NFluent.Extensibility.Checker`2.ExecuteCheck(System.Action,System.String)">
            <summary>
            Executes the check provided as an happy-path lambda (vs lambda for negated version).
            </summary>
            <param name="action">
                The happy-path action (vs. the one for negated version which has not to be specified). 
                This lambda should simply return if everything is ok, or throws a 
                <see cref="T:NFluent.FluentCheckException"/> otherwise.</param>
            <param name="negatedExceptionMessage">
                The message for the exception to be thrown when the check fails, in the case we were running the negated version.
            </param>
            <returns>
                A new check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The check fails.</exception>
        </member>
        <member name="M:NFluent.Extensibility.Checker`2.ExecuteNotLinkableCheck(System.Action,System.String)">
            <summary>
            Executes the check provided as an happy-path lambda (vs lambda for negated version).
            </summary>
            <param name="action">The happy-path action (vs. the one for negated version which has not to be specified).
            This lambda should simply return if everything is ok, or throws a
            <see cref="T:NFluent.FluentCheckException"/> otherwise.</param>
            <param name="negatedExceptionMessage">The message for the exception to be thrown when the check fails, in the case we were running the negated version.</param>
            <exception cref="T:NFluent.FluentCheckException">The check fails.</exception>
        </member>
        <member name="P:NFluent.Extensibility.Checker`2.ReturnValueForLinkage">
            <summary>
            Gets the check link to return for the next check to be executed (linked with the And operator).
            </summary>
            <value>
            The check link to return for next check (linked with the And operator) to be executed.
            </value>
        </member>
        <member name="P:NFluent.Extensibility.Checker`2.Value">
            <summary>
            Gets the value to be tested (provided for any extension method to be able to test it).
            </summary>
            <value>
            The value to be tested by any fluent check extension method.
            </value>
        </member>
        <member name="P:NFluent.Extensibility.Checker`2.Negated">
            <summary>
            Gets a value indicating whether this <see cref="T:NFluent.FluentCheck`1"/> should be negated or not.
            This property is useful when you implement check methods.
            </summary>
            <value>
            <c>true</c> if all the methods applying to this check instance should be negated; <c>false</c> otherwise.
            </value>
        </member>
        <member name="T:NFluent.Extensibility.ExtensibilityHelper">
            <summary>
            Helper that allow to extract the checker to be used for and from any given fluent check instance.
            </summary>
        </member>
        <member name="M:NFluent.Extensibility.ExtensibilityHelper.ExtractChecker``1(NFluent.ICheck{``0})">
            <summary>
            Extracts the checker to be used in order to check things on the value contained within
            the given fluent check.
            </summary>
            <typeparam name="T">The type of checked value.</typeparam>
            <param name="check">The fluent check instance to work on.</param>
            <returns>
            The checker to be used to check things on the value contained in the fluent check.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.ExtensibilityHelper.ExtractCodeChecker``1(NFluent.ICodeCheck{``0})">
            <summary>
            Extracts the code checker.
            </summary>
            <typeparam name="TU">The type of checked value.</typeparam>
            <param name="check">The check.</param>
            <returns>The checker to be used to check things on the value contained in the fluent check.</returns>
        </member>
        <member name="M:NFluent.Extensibility.ExtensibilityHelper.ExtractStructChecker``1(NFluent.IStructCheck{``0})">
            <summary>
            Extracts the checker to be used in order to check things on the struct instance contained within
            the given fluent check.
            </summary>
            <typeparam name="TS">The type of the struct to be checked.</typeparam>
            <param name="check">The fluent check instance to work on.</param>
            <returns>
            The checker to be used to check things on the value contained in the fluent check.
            </returns>
        </member>
        <member name="T:NFluent.Extensibility.FluentMessage">
            <summary>
            Help to build a properly formatted fluent error message.
            </summary>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Extensibility.FluentMessage"/> class.
            </summary>
            <param name="message">
            The main message.
            </param>
            <remarks>
            You can use {x} as place holders for standard wordings:
            - {0}. 
            </remarks>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.BuildMessage(System.String)">
            <summary>
            Builds the message.
            </summary>
            <param name="message">The message.</param>
            <returns>A fluent message builder.</returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.For(System.String)">
            <summary>
            Specifies the attribute to use to describe entities.
            </summary>
            <param name="newEntityDescription">The new description for the Entity.</param>
            <returns>The same fluent message.</returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.On(System.Object)">
            <summary>
            Adds a block describing the checked objet.
            </summary>
            <param name="test">The tested object/value.</param>
            <returns>A <see cref="T:NFluent.Extensibility.FluentMessage"/> to continue build the message.</returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.Expected(System.Object)">
            <summary>
            Adds a message block to describe the expected result.
            </summary>
            <param name="expected">The expected value.</param>
            <returns>The created MessageBlock.</returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.ExpectedType(System.Type)">
            <summary>
            Adds a message block to describe the expected type.
            </summary>
            <param name="expectedType">The expected type.</param>
            <returns>The created MessageBlock.</returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.ExpectedValues(System.Object)">
            <summary>
            Adds a message block to describe the expected values.
            </summary>
            <param name="expectedValues">The expected values.</param>
            <returns>The created MessageBlock.</returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.WithGivenValue(System.Object)">
            <summary>
            Adds a message block to describe the given value (usually used as an 
            alternative to the Expected block).
            </summary>
            <param name="givenValue">The given value.</param>
            <returns>The created MessageBlock.</returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.GetEntityFromType(System.Object)">
            <summary>
            Gets the entity label based on the given type.
            </summary>
            <param name="value">The value to get the type from.</param>
            <returns>The appropriate entity label.</returns>
        </member>
        <member name="P:NFluent.Extensibility.FluentMessage.ExpectedLabel">
            <summary>
            Gets the expected value label.
            </summary>
            <value>
            The expected label.
            </value>
        </member>
        <member name="P:NFluent.Extensibility.FluentMessage.ExpectedValuesLabel">
            <summary>
            Gets the expected values label.
            </summary>
            <value>
            The expected values label.
            </value>
        </member>
        <member name="P:NFluent.Extensibility.FluentMessage.GivenLabel">
            <summary>
            Gets the given value label.
            </summary>
            <value>
            The given value label.
            </value>
        </member>
        <member name="P:NFluent.Extensibility.FluentMessage.TestedLabel">
            <summary>
            Gets the tested value label.
            </summary>
            <value>
            The tested label.
            </value>
        </member>
        <member name="T:NFluent.Extensibility.FluentMessage.MessageBlock">
            <summary>
            Class describing a message block.
            </summary>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.MessageBlock.#ctor(NFluent.Extensibility.FluentMessage,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Extensibility.FluentMessage.MessageBlock"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="test">The tested object.</param>
            <param name="attribute">The block attribute.</param>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.MessageBlock.#ctor(NFluent.Extensibility.FluentMessage,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Extensibility.FluentMessage.MessageBlock"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="type">The tested type.</param>
            <param name="attribute">The block attribute.</param>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.MessageBlock.GetMessage">
            <summary>
            Gets the message as a string.
            </summary>
            <returns>A string with the properly formatted message.</returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.MessageBlock.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.MessageBlock.WithHashCode(System.Boolean)">
            <summary>
            Requests that the Hash value is included in the description block.
            </summary>
            <param name="active">
            True to include the type. This is the default value.
            </param>
            <returns>
            Returns this instance for chained calls.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.MessageBlock.WithType(System.Boolean,System.Boolean)">
            <summary>
            Requests that the type is included in the description block.
            </summary>
            <param name="active">
            True to include the type. This is the default value.
            </param>
            <param name="full">
            True to display the full type name (with assembly).
            </param>
            <returns>
            Returns this instance for chained calls.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.MessageBlock.WithType(System.Type)">
            <summary>
            Requests that a specific type is included in the description block.
            </summary>
            <param name="forcedType">Type to include in the description.</param>
            <remarks>Default type is the type of the object instance given in constructor.</remarks>
            <returns>
            Returns this instance for chained calls.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.MessageBlock.Comparison(System.String)">
            <summary>
            Adds a specific comparison message (e.g 'equal to').
            </summary>
            <param name="comparison">
            The comparison suffix.
            </param>
            <returns>
            The <see cref="T:NFluent.Extensibility.FluentMessage.MessageBlock"/> for fluent API.
            </returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.MessageBlock.Label(System.String)">
            <summary>
            Specifies a specific attribute for the message.
            </summary>
            <param name="newLabel">The new attribute.</param>
            <returns>This <see cref="T:NFluent.Extensibility.FluentMessage.MessageBlock"/>.</returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.MessageBlock.GetBlockLabel">
            <summary>
            Gets the block label.
            </summary>
            <returns>The block Label.</returns>
        </member>
        <member name="M:NFluent.Extensibility.FluentMessage.MessageBlock.WithEnumerableCount(System.Int64)">
            <summary>
            Adds a description of the number of items (only relevant if the object is an enumerable).
            </summary>
            <param name="itemsCount">The number of items of the enumerable instance.</param>
            <returns>The description of the number of items (only relevant if the object is an enumerable).</returns>
        </member>
        <member name="P:NFluent.Extensibility.FluentMessage.MessageBlock.And">
            <summary>
            Gets the Message.
            </summary>
            <value>
            The <see cref="T:NFluent.Extensibility.FluentMessage"/> holding that block.
            </value>
        </member>
        <member name="T:NFluent.EnumerableExtensions">
            <summary>
            Extension methods for adding new fluent methods to enumerable.
            </summary>
        </member>
        <member name="M:NFluent.EnumerableExtensions.ToEnumeratedString(System.Collections.IEnumerable)">
            <summary>
            Return a string containing all the <see cref="T:System.Collections.IEnumerable"/> elements, separated by a comma.
            </summary>
            <param name="enumerable">The enumerable to transform into a string.</param>
            <returns>
            A string containing all the <see cref="T:System.Collections.IEnumerable"/> elements, separated by a comma.
            </returns>
        </member>
        <member name="M:NFluent.EnumerableExtensions.Count(System.Collections.IEnumerable)">
            <summary>
            Returns the number of items present within the specified enumerable (returns 0 if the enumerable is null).
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>The number of items present within the specified enumerable (returns 0 if the enumerable is null).</returns>
        </member>
        <member name="M:NFluent.EnumerableExtensions.ToEnumeratedString(System.Collections.IEnumerable,System.Int64@,System.String)">
            <summary>
            Return a string containing all the elements of an <see cref="T:System.Collections.IEnumerable"/>, separated by a given separator.
            </summary>
            <param name="enumerable">The enumerable to transform into a string.</param>
            <param name="itemsCount">The number of items within the <see cref="T:System.Collections.IEnumerable"/>.</param>
            <param name="separator">The separator.</param>
            <returns>
            A string containing all the <see cref="T:System.Collections.IEnumerable"/> elements, separated by a separator.
            </returns>
        </member>
        <member name="M:NFluent.EnumerableExtensions.ToEnumeratedString(System.Collections.IEnumerable,System.Int64@)">
            <summary>
            Return a string containing all the elements of an <see cref="T:System.Collections.IEnumerable"/>, separated by a comma.
            </summary>
            <param name="enumerable">The enumerable to transform into a string.</param>
            <param name="itemsCount">The number of items within the <see cref="T:System.Collections.IEnumerable"/>.</param>
            <returns>
            A string containing all the <see cref="T:System.Collections.IEnumerable"/> elements, separated by a comma.
            </returns>
        </member>
        <member name="M:NFluent.EnumerableExtensions.ToEnumeratedString(System.Collections.IEnumerable,System.String)">
            <summary>
            Return a string containing all the elements of an <see cref="T:System.Collections.IEnumerable"/>, separated by a given separator.
            </summary>
            <param name="enumerable">The enumerable to transform into a string.</param>
            <param name="separator">The separator.</param>
            <returns>A string containing all the <see cref="T:System.Collections.IEnumerable"/> elements, separated by the given separator.</returns>
            A string containing all the <see cref="T:System.Collections.IEnumerable"/> elements, separated by the given separator.
        </member>
        <member name="T:NFluent.Extensions.ExtensionsCommonHelpers">
            <summary>
            Common helper methods for the NFluent extension methods.
            </summary>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.ToStringProperlyFormated(System.Object)">
            <summary>
            Returns a string that represents the current object. If the object is already a string, this method will surround it with brackets.
            </summary>
            <param name="theObject">The theObject.</param>
            <returns>A string that represents the current object. If the object is already a string, this method will surround it with brackets.</returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.TypeToStringProperlyFormated(System.Type,System.Boolean)">
            <summary>
            Returns a string with the type name, as seen in source code.
            </summary>
            <param name="type">
            The type to get the name of.
            </param>
            <param name="shortName">
            If set to <c>true</c> return the name without namespaces.
            </param>
            <returns>
            A string containing the type name.
            </returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.ToStringProperlyFormated(System.DateTime)">
            <summary>
            Returns a string that represents the current DateTime.         
            </summary>
            <param name="theDateTime">The DateTime.</param>
            <returns>A string that represents the current object with current culture ignore.</returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.ToStringProperlyFormated(System.Boolean)">
            <summary>
            Returns a string that represents the current Boolean.         
            </summary>
            <param name="theBoolean">The Boolean.</param>
            <returns>A string that represents the current object with current culture ignore.</returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.ToStringProperlyFormated(System.Double)">
            <summary>
            Returns a string that represents the current double.         
            </summary>
            <param name="value">The value.</param>
            <returns>A string that represents the current object with current culture ignore.</returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.ToStringProperlyFormated(System.Single)">
            <summary>
            Returns a string that represents the current float.         
            </summary>
            <param name="value">The value.</param>
            <returns>A string that represents the current object with current culture ignore.</returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.IsNullable(System.Type)">
            <summary>
            Determines whether the specified type is nullable.
            </summary>
            <param name="type">
            The type to be evaluated.
            </param>
            <returns>
            <c>true</c> if the specified type is nullable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.ImplementsEquals(System.Type)">
            <summary>
            Determines whether the specified type implements Equals.
            </summary>
            <param name="type">The type to be analyzed.</param>
            <returns><c>true</c> is the specified type implements Equals.</returns>
        </member>
        <member name="M:NFluent.Extensions.ExtensionsCommonHelpers.DoubleCurlyBraces(System.String)">
            <summary>
            Doubles the curly braces in the string.
            </summary>
            <returns>The string having curly braces doubled.</returns>
            <param name="value">String to correct.</param>
        </member>
        <member name="T:NFluent.ExtractingExtensions">
            <summary>
            Extension methods for exploiting enumerable content in a fluent manner (i.e. with auto completion support and in an english readable way).
            </summary>
        </member>
        <member name="M:NFluent.ExtractingExtensions.Extracting``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Extract all the values of a given property given its name, from an enumerable collection of objects holding that property.
            </summary>
            <typeparam name="T">Type of the objects belonging to the initial enumerable collection.</typeparam>
            <param name="enumerable">The enumerable collection of objects.</param>
            <param name="propertyName">Name of the property to extract value from for every object of the collection.</param>
            <returns>
            An enumerable of all the property values for every <typeparamref name="T"/> objects in the <paramref name="enumerable"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">The object of type <typeparamref name="T"/> don't have a property with the given property name.</exception>
        </member>
        <member name="M:NFluent.ExtractingExtensions.Properties``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Extract all the values of a given property given its name, from an enumerable collection of objects holding that property.
            </summary>
            <typeparam name="T">Type of the objects belonging to the initial enumerable collection.</typeparam>
            <param name="enumerable">The enumerable collection of objects.</param>
            <param name="propertyName">Name of the property to extract value from for every object of the collection.</param>
            <returns>
            An enumerable of all the property values for every <typeparamref name="T"/> objects in the <paramref name="enumerable"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">The object of type <typeparamref name="T"/> don't have a property with the given property name.</exception>
        </member>
        <member name="M:NFluent.ExtractingExtensions.Extracting``1(``0[],System.String)">
            <summary>
            Extract all the values of a given property given its name, from an array of objects holding that property.
            </summary>
            <typeparam name="T">Type of the objects belonging to the array.</typeparam>
            <param name="array">The array of <typeparamref name="T"/>.</param>
            <param name="propertyName">Name of the property to extract value from for every object of the array.</param>
            <returns>
            An enumerable of all the property values for every <typeparamref name="T"/> objects in the <see cref="T:System.Array"/>.
            </returns>
        </member>
        <member name="M:NFluent.ExtractingExtensions.Properties``1(``0[],System.String)">
            <summary>
            Extract all the values of a given property given its name, from an array of objects holding that property.
            </summary>
            <typeparam name="T">Type of the objects belonging to the array.</typeparam>
            <param name="array">The array of <typeparamref name="T"/>.</param>
            <param name="propertyName">Name of the property to extract value from for every object of the array.</param>
            <returns>
            An enumerable of all the property values for every <typeparamref name="T"/> objects in the <see cref="T:System.Array"/>.
            </returns>
        </member>
        <member name="M:NFluent.Extensions.ObjectExtensions.GetTypeWithoutThrowingException(System.Object)">
            <summary>
            Gets the type of the specified reference, or null if it is null.
            </summary>
            <param name="reference">The reference we interested in retrieving the type (may be null).</param>
            <returns>
            The type of the specified reference, or null if the reference is null.
            </returns>
        </member>
        <member name="T:NFluent.FluentCheck`1">
            <summary>
            Provides fluent check methods to be executed on a given value.
            </summary>
            <typeparam name="T">
            Type of the value to assert on.
            </typeparam>
        </member>
        <member name="T:NFluent.ICheck`1">
            <summary>
            Provides check methods to be executed on a given value.
            </summary>
            <typeparam name="T">Type of the value to assert on.</typeparam>
        </member>
        <member name="T:NFluent.INegateableCheck`1">
            <summary>
            Fluent check that has the ability to be negated via a 'Not' operator.
            </summary>
            <typeparam name="T">Fluent check type to be negated.</typeparam>
        </member>
        <member name="P:NFluent.INegateableCheck`1.Not">
            <summary>
            Negates the next check, and the next check only.
            </summary>
            <value>
            The next check negated.
            </value>
        </member>
        <member name="M:NFluent.ICheck`1.Equals(System.Object)">
            <summary>
            Checks whether the specified <see cref="T:System.Object"/> is equal to this instance or not.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; throws a <see cref="T:NFluent.FluentCheckException"/> otherwise.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The specified <see cref="T:System.Object"/> is not equal to this instance.</exception>
        </member>
        <member name="M:NFluent.ICheck`1.IsInstanceOf``1">
            <summary>
            Checks whether if the checked value is of the given type.
            </summary>
            <typeparam name="U">The given type to check the checked value against.</typeparam>
            <returns>A chainable check.</returns>
            <exception cref="T:NFluent.FluentCheckException">The specified value is null (and not of the same nullable type) or not of the given type.</exception>
        </member>
        <member name="M:NFluent.ICheck`1.IsNotInstanceOf``1">
            <summary>
            Checks whether if the checked value is different from the given type.
            </summary>
            <typeparam name="U">The given type to check the checked value against.</typeparam>
            <returns>A chainable check.</returns>
            <exception cref="T:NFluent.FluentCheckException">The specified value is of the given type.</exception>
        </member>
        <member name="T:NFluent.ICheckForExtensibility`2">
            <summary>
            Fluent check which exposes more information for extensibility purpose.
            </summary>
            <typeparam name="T">
            Type of the value to assert on.
            </typeparam>
            <typeparam name="C">Interface for the type.
            </typeparam>
        </member>
        <member name="T:NFluent.IExposingChecker`2">
            <summary>
            Exposes an executable check for this given type. 
            </summary>
            <typeparam name="T">
            The type of the data to be checked.
            </typeparam>
            <typeparam name="TC">Interface for the check.
            </typeparam>
        </member>
        <member name="P:NFluent.IExposingChecker`2.Checker">
            <summary>
            Gets the runnable check to use for checking something on a value of a given type.
            </summary>
            <value>
            The runnable check to use for checking something on a given type.
            </value>
        </member>
        <member name="F:NFluent.FluentCheck`1.checker">
            <summary>
            The check runner.
            </summary>
        </member>
        <member name="M:NFluent.FluentCheck`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.FluentCheck`1"/> class.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:NFluent.FluentCheck`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.FluentCheck`1"/> class.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="negated">
            A boolean value indicating whether the check should be negated or not.
            </param>
        </member>
        <member name="M:NFluent.FluentCheck`1.Equals(System.Object)">
            <summary>
            Checks whether the specified <see cref="T:System.Object"/> is equal to this instance or not.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; throws a <see cref="T:NFluent.FluentCheckException"/> otherwise.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The specified <see cref="T:System.Object"/> is not equal to this instance.
            </exception>
        </member>
        <member name="M:NFluent.FluentCheck`1.IsInstanceOf``1">
            <summary>
            Checks whether if the checked value is of the given type.
            </summary>
            <typeparam name="U">The given type to check the checked value against.</typeparam>
            <returns>A chainable check.</returns>
            <exception cref="T:NFluent.FluentCheckException">The specified value is null (and not of the same nullable type) or not of the given type.</exception>
        </member>
        <member name="M:NFluent.FluentCheck`1.IsNotInstanceOf``1">
            <summary>
            Checks whether if the checked value is different from the given type.
            </summary>
            <typeparam name="U">The given type to check the checked value against.</typeparam>
            <returns>A chainable check.</returns>
            <exception cref="T:NFluent.FluentCheckException">The specified value is of the given type.</exception>
        </member>
        <member name="M:NFluent.FluentCheck`1.NFluent#IForkableCheck#ForkInstance">
            <summary>
            Creates a new instance of the same fluent check type, injecting the same Value property
            (i.e. the system under test), but with a false Negated property in any case.
            </summary>
            <returns>
            A new instance of the same fluent check type, with the same Value property.
            </returns>
            <remarks>
            This method is used during the chaining of multiple checks.
            </remarks>
        </member>
        <member name="P:NFluent.FluentCheck`1.Negated">
            <summary>
            Gets a value indicating whether this <see cref="T:NFluent.FluentCheck`1"/> should be negated or not.
            </summary>
            <value>
            <c>true</c> if all the methods applying to this check instance should be negated; <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:NFluent.FluentCheck`1.Not">
            <summary>
            Negates the next check.
            </summary>
            <value>
            The next check negated.
            </value>
        </member>
        <member name="P:NFluent.FluentCheck`1.Value">
            <summary>
            Gets the value to be tested (provided for any extension method to be able to test it).
            </summary>
            <value>
            The value to be tested by any fluent check extension method.
            </value>
        </member>
        <member name="P:NFluent.FluentCheck`1.Checker">
            <summary>
            Gets the runner to use for checking something on a given type.
            </summary>
            <value>
            The runner to use for checking something on a given type.
            </value>
        </member>
        <member name="T:NFluent.FluentCheckException">
            <summary>
            Thrown when an check failed.
            </summary>
        </member>
        <member name="M:NFluent.FluentCheckException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.FluentCheckException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:NFluent.FluentCodeCheck`1">
            <summary>
            This class stores all required information to check code.
            </summary>
            <typeparam name="T">Code type.</typeparam>
        </member>
        <member name="T:NFluent.ICodeCheck`1">
            <summary>
            Used as a marker for code related checks.
            </summary>
            <typeparam name="T">Code description type. Must inherit from RunTrace.</typeparam>
        </member>
        <member name="M:NFluent.FluentCodeCheck`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.FluentCodeCheck`1"/> class.
            </summary>
            <param name="getTrace">The execution trace.</param>
        </member>
        <member name="M:NFluent.FluentCodeCheck`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.FluentCodeCheck`1"/> class.
            </summary>
            <param name="value">The execution trace.
            </param>
            <param name="negated">True if test must be negated.
            </param>
        </member>
        <member name="M:NFluent.FluentCodeCheck`1.ForkInstance">
            <summary>
            Creates a new instance of the same fluent check type, injecting the same Value property 
            (i.e. the system under test), but with a false Negated property in any case.
            </summary>
            <remarks>This method is used during the chaining of multiple checks.</remarks>
            <returns>A new instance of the same fluent check type, with the same Value property.</returns>
        </member>
        <member name="P:NFluent.FluentCodeCheck`1.Not">
            <summary>
            Negates the next check.
            </summary>
            <value>
            The next check negated.
            </value>
        </member>
        <member name="P:NFluent.FluentCodeCheck`1.Value">
            <summary>
            Gets the value to be tested (provided for any extension method to be able to test it).
            </summary>
            <value>
            The value to be tested by any fluent check extension method.
            </value>
        </member>
        <member name="P:NFluent.FluentCodeCheck`1.Checker">
            <summary>
            Gets the runnable check to use for checking something on a value of a given type.
            </summary>
            <value>
            The runnable check to use for checking something on a given type.
            </value>
        </member>
        <member name="P:NFluent.FluentCodeCheck`1.Negated">
            <summary>
            Gets a value indicating whether this <see cref="T:NFluent.FluentCheck`1"/> should be negated or not.
            This property is useful when you implement check methods. 
            </summary>
            <value>
              <c>true</c> if all the methods applying to this check instance should be negated; <c>false</c> otherwise.
            </value>
        </member>
        <member name="T:NFluent.FluentStructCheck`1">
            <summary>
            Provides check methods to be executed on a given struct value.
            </summary>
            <typeparam name="T">Type of the struct value to assert on.</typeparam>
        </member>
        <member name="T:NFluent.IStructCheck`1">
            <summary>
            Provides check methods to be executed on a given value of type struct.
            </summary>
            <typeparam name="T">Type of the struct value to assert on.</typeparam>
        </member>
        <member name="M:NFluent.IStructCheck`1.Equals(System.Object)">
            <summary>
            Checks whether the specified <see cref="T:System.Object"/> is equal to this instance or not.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; throws a <see cref="T:NFluent.FluentCheckException"/> otherwise.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The specified <see cref="T:System.Object"/> is not equal to this instance.</exception>
        </member>
        <member name="M:NFluent.IStructCheck`1.IsInstanceOf``1">
            <summary>
            Checks whether if the checked value is of the given type.
            </summary>
            <typeparam name="U">The given type to check the checked value against.</typeparam>
            <returns>A chainable check.</returns>
            <exception cref="T:NFluent.FluentCheckException">The specified value is not of the given type.</exception>
        </member>
        <member name="M:NFluent.IStructCheck`1.IsNotInstanceOf``1">
            <summary>
            Checks whether if the checked value is different from the given type.
            </summary>
            <typeparam name="U">The given type to check the checked value against.</typeparam>
            <returns>A chainable check.</returns>
            <exception cref="T:NFluent.FluentCheckException">The specified value is of the given type.</exception>
        </member>
        <member name="M:NFluent.FluentStructCheck`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.FluentStructCheck`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:NFluent.FluentStructCheck`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.FluentStructCheck`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="negated">A boolean value indicating whether the check should be negated or not.</param>
        </member>
        <member name="M:NFluent.FluentStructCheck`1.NFluent#IForkableCheck#ForkInstance">
            <summary>
            Creates a new instance of the same fluent check type, injecting the same Value property
            (i.e. the system under test), but with a false Negated property in any case.
            </summary>
            <returns>
            A new instance of the same fluent check type, with the same Value property.
            </returns>
            <remarks>
            This method is used during the chaining of multiple checks.
            </remarks>
        </member>
        <member name="M:NFluent.FluentStructCheck`1.IsInstanceOf``1">
            <summary>
            Checks whether if the checked value is of the given type.
            </summary>
            <typeparam name="U">The given type to check the checked value against.</typeparam>
            <returns>A chainable check.</returns>
            <exception cref="T:NFluent.FluentCheckException">The specified value is not of the given type.</exception>
        </member>
        <member name="M:NFluent.FluentStructCheck`1.IsNotInstanceOf``1">
            <summary>
            Checks whether if the checked value is different from the given type.
            </summary>
            <typeparam name="U">The given type to check the checked value against.</typeparam>
            <returns>A chainable check.</returns>
            <exception cref="T:NFluent.FluentCheckException">The specified value is of the given type.</exception>
        </member>
        <member name="P:NFluent.FluentStructCheck`1.Value">
            <summary>
            Gets the value to be tested (provided for any extension method to be able to test it).
            </summary>
            <value>
            The value to be tested by any fluent check extension method.
            </value>
        </member>
        <member name="P:NFluent.FluentStructCheck`1.Negated">
            <summary>
            Gets a value indicating whether this <see cref="T:NFluent.FluentCheck`1"/> should be negated or not.
            </summary>
            <value>
              <c>true</c> if all the methods applying to this check instance should be negated; <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:NFluent.FluentStructCheck`1.Not">
            <summary>
            Negates the next check.
            </summary>
            <value>
            The next check negated.
            </value>
        </member>
        <member name="P:NFluent.FluentStructCheck`1.Checker">
            <summary>
            Gets the runner to use for checking something on a given type.
            </summary>
            <value>
            The runner to use for checking something on a given type.
            </value>
        </member>
        <member name="T:NFluent.Helpers.ComparableHelper">
            <summary>
            Helper class related to IComparable methods (used like a traits).
            </summary>
        </member>
        <member name="M:NFluent.Helpers.ComparableHelper.IsBefore(System.IComparable,System.IComparable)">
            <summary>
            Checks that a comparable checked value is before another given value.
            </summary>
            <param name="checkedValue">The checked value.</param>
            <param name="givenValue">The other given value.</param>
            <exception cref="T:NFluent.FluentCheckException">The checked value is not before the given value.</exception>
        </member>
        <member name="M:NFluent.Helpers.ComparableHelper.IsAfter(System.IComparable,System.IComparable)">
            <summary>
            Checks that a comparable checked value is after another given value.
            </summary>
            <param name="checkedValue">The checked value.</param>
            <param name="givenValue">The other given value.</param>
            <exception cref="T:NFluent.FluentCheckException">The checked value is not after the given value.</exception>
        </member>
        <member name="T:NFluent.Helpers.Duration">
            <summary>
            Represents a duration as an unit and a quantity.
            </summary>
        </member>
        <member name="M:NFluent.Helpers.Duration.#ctor(System.Double,NFluent.TimeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Helpers.Duration"/> struct. 
            </summary>
            <param name="rawDuration">
            Duration of the raw.
            </param>
            <param name="timeUnit">
            The time unit.
            </param>
        </member>
        <member name="M:NFluent.Helpers.Duration.#ctor(System.TimeSpan,NFluent.TimeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.Helpers.Duration"/> struct.
            </summary>
            <param name="timeSpan">The time span.</param>
            <param name="unit">The time unit.</param>
        </member>
        <member name="M:NFluent.Helpers.Duration.ConvertToMilliseconds(System.Double,NFluent.TimeUnit)">
            <summary>
            Converts a given duration to a number of milliseconds.
            </summary>
            <param name="duration">The duration value.</param>
            <param name="durationTimeUnit">The time unit of the duration.</param>
            <returns>The number of milliseconds corresponding to that duration.</returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.op_LessThan(NFluent.Helpers.Duration,NFluent.Helpers.Duration)">
            <summary>
            Checks if duration a is less than duration b.
            </summary>
            <param name="a">
            First operand.
            </param>
            <param name="b">
            Second operand.
            </param>
            <returns>
            True if a is less than b.
            </returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.op_GreaterThanOrEqual(NFluent.Helpers.Duration,NFluent.Helpers.Duration)">
            <summary>
            Checks if duration a is greater than or equal to duration b.
            </summary>
            <param name="a">
            First operand.
            </param>
            <param name="b">
            Second operand.
            </param>
            <returns>
            True if a is greater than or equal to b.
            </returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.op_LessThanOrEqual(NFluent.Helpers.Duration,NFluent.Helpers.Duration)">
            <summary>
            Checks if duration a is less than or equal to duration b.
            </summary>
            <param name="a">
            First operand.
            </param>
            <param name="b">
            Second operand.
            </param>
            <returns>
            True if a is less than or equal to b.
            </returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.op_GreaterThan(NFluent.Helpers.Duration,NFluent.Helpers.Duration)">
            <summary>
            Checks if duration a is greater than duration b.
            </summary>
            <param name="a">
            First operand.
            </param>
            <param name="b">
            Second operand.
            </param>
            <returns>
            True if a is greater than b.
            </returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.op_Equality(NFluent.Helpers.Duration,NFluent.Helpers.Duration)">
            <summary>
            Checks if the duration is equal to another object.
            </summary>
            <param name="left">
            First comparand.
            </param>
            <param name="right">
            Second comparand.
            </param>
            <returns>
            True if both operand represents the same duration.
            </returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.op_Inequality(NFluent.Helpers.Duration,NFluent.Helpers.Duration)">
            <summary>
            Checks if the duration is different from another object.
            </summary>
            <param name="left">
            First comparand.
            </param>
            <param name="right">
            Second comparand.
            </param>
            <returns>
            True if both operand represents different duration.
            </returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.Equals(NFluent.Helpers.Duration)">
            <summary>
            Checks if the duration is equal to another one.
            </summary>
            <param name="other">The duration to compare to.</param>
            <returns>True if both Durations represents the same duration.</returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.Equals(System.Object)">
            <summary>
            Checks if the duration is equal to another object.
            </summary>
            <param name="obj">The duration to compare to.</param>
            <returns>True if both Durations represents the same duration.</returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.GetHashCode">
            <summary>
            Gets the hash value of this instance.
            </summary>
            <returns>
            A 32 bits integer representing the hash value.
            </returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NFluent.Helpers.Duration.ConvertTo(NFluent.TimeUnit)">
            <summary>
            Gets a new instance for the same duration expressed in another <see cref="T:NFluent.TimeUnit"/>
            </summary>
            <param name="newTmeUnit">The target time unit.</param>
            <returns>The new <see cref="T:NFluent.Helpers.Duration"/>.</returns>
        </member>
        <member name="P:NFluent.Helpers.Duration.RawDuration">
            <summary>
            Gets the duration quantity expressed in the proper <see cref="T:NFluent.TimeUnit"/>.
            </summary>
            <value>
            The duration quantity expressed in the proper <see cref="T:NFluent.TimeUnit"/>.
            </value>
        </member>
        <member name="P:NFluent.Helpers.Duration.Unit">
            <summary>
            Gets the unit in which the duration is express.
            </summary>
            <value>
            The unit used for the duration.
            </value>
        </member>
        <member name="T:NFluent.Helpers.EqualityHelper">
            <summary>
            Helper class related to Equality methods (used like a traits).
            </summary>
        </member>
        <member name="M:NFluent.Helpers.EqualityHelper.IsEqualTo(System.Object,System.Object)">
            <summary>
            Checks that a given instance is considered to be equal to another expected instance. Throws <see cref="T:NFluent.FluentCheckException"/> otherwise.
            </summary>
            <param name="instance">The considered instance.</param>
            <param name="expected">The expected instance.</param>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="M:NFluent.Helpers.EqualityHelper.BuildErrorMessage(System.Object,System.Object,System.Boolean)">
            <summary>
            Builds the error message related to the Equality verification. This should be called only if the test failed (no matter it is negated or not).
            </summary>
            <param name="instance">The checked instance.</param>
            <param name="expected">The other operand.</param>
            <param name="isEqual">A value indicating whether the two values are equal or not. <c>true</c> if they are equal; <c>false</c> otherwise.</param>
            <returns>The error message related to the Equality verification.</returns>
        </member>
        <member name="M:NFluent.Helpers.EqualityHelper.IsNotEqualTo(System.Object,System.Object)">
            <summary>
            Checks that a given instance is not considered to be equal to another expected instance. Throws <see cref="T:NFluent.FluentCheckException"/> otherwise.
            </summary>
            <param name="instance">The considered instance.</param>
            <param name="expected">The expected instance.</param>
            <exception cref="T:NFluent.FluentCheckException">The actual value is not equal to the expected value.</exception>
        </member>
        <member name="T:NFluent.Helpers.ExceptionHelper">
            <summary>
            Offer factory services to get adequate exception type depending on testing framework.
            </summary>
        </member>
        <member name="M:NFluent.Helpers.ExceptionHelper.BuildException(System.String)">
            <summary>
            Builds an exception with the given message. Automatically detect the exception type to use depending on the used check framework.
            </summary>
            <param name="theMessage">The message to build the exception with.</param>
            <returns>An exception instance of the appropriate type with the given message.</returns>
        </member>
        <member name="T:NFluent.Helpers.ExceptionHelper.ExceptionConstructor">
            <summary>
            Stores adequate constructors.
            </summary>
        </member>
        <member name="T:NFluent.Helpers.IsInstanceHelper">
            <summary>
            Helper class related to Is(Not)Instance methods (used like a traits).
            </summary>
        </member>
        <member name="M:NFluent.Helpers.IsInstanceHelper.IsSameType(System.Type,System.Type,System.Object)">
            <summary>
            Checks that a type is the same as the expected one.
            </summary>
            <param name="instanceType">The type of the instance to be checked.</param>
            <param name="expectedType">The expected type for the instance to be checked.</param>
            <param name="value">The value of the instance to be checked (may be a nullable instance).</param>
        </member>
        <member name="M:NFluent.Helpers.IsInstanceHelper.IsInstanceOf(System.Object,System.Type)">
            <summary>
            Checks that an instance is of the given expected type.
            </summary>
            <param name="instance">The instance to be checked.</param>
            <param name="expectedType">The expected type.</param>
            <exception cref="T:NFluent.FluentCheckException">The instance is not of the expected type.</exception>
        </member>
        <member name="M:NFluent.Helpers.IsInstanceHelper.IsNotInstanceOf(System.Object,System.Type)">
            <summary>
            Checks that an instance is not of the given expected type.
            </summary>
            <param name="instance">The instance to be checked.</param>
            <param name="typeNotExpected">The type not expected.</param>
            <exception cref="T:NFluent.FluentCheckException">The instance is of the type not expected.</exception>
        </member>
        <member name="M:NFluent.Helpers.IsInstanceHelper.InheritsFrom(System.Object,System.Type)">
            <summary>
            Checks that an instance is in the inheritance hierarchy of a specified type.
            </summary>
            <param name="instance">The instance to be checked.</param>
            <param name="expectedBaseType">The Type which is expected to be a base Type of the instance.</param>
            <exception cref="T:NFluent.FluentCheckException">The instance is not in the inheritance hierarchy of the specified type.</exception>
        </member>
        <member name="M:NFluent.Helpers.IsInstanceHelper.BuildErrorMessage(System.Object,System.Type,System.Boolean)">
            <summary>
            Builds the error message related to the type comparison. This should be called only if the test failed (no matter it is negated or not).
            Warning: Should not call this method with nullable types. Indeed, the Nullable types are treated specially by CLR and it is impossible to have a boxed instance of a nullable type.
            Instead, boxing a nullable type will result in a null reference (if HasValue is false), or the boxed value (if there is a value).
            </summary>
            <param name="value">The checked value.</param>
            <param name="typeOperand">The other type operand.</param>
            <param name="isSameType">A value indicating whether the two types are identical or not. <c>true</c> if they are equal; <c>false</c> otherwise.</param>
            <returns>
            The error message related to the type comparison.
            </returns>
        </member>
        <member name="T:NFluent.Helpers.TimeHelper">
            <summary>
            Static class hosting various time helper.
            </summary>
        </member>
        <member name="M:NFluent.Helpers.TimeHelper.GetInNanoSeconds(System.Double,NFluent.TimeUnit)">
            <summary>
            Converts a duration in nanoseconds.
            </summary>
            <param name="value">Number of time units.</param>
            <param name="unit">Time unit in which duration is expressed.</param>
            <returns>
            The number of nanoseconds.
            </returns>
            <exception cref="T:System.InvalidOperationException">Raised if time unit is not recognized.</exception>
        </member>
        <member name="M:NFluent.Helpers.TimeHelper.GetFromNanoSeconds(System.Double,NFluent.TimeUnit)">
            <summary>
            Converts a duration in nanoseconds to the desired <see cref="T:NFluent.TimeUnit"/>.
            </summary>
            <param name="duration">
            The duration in nanoseconds.
            </param>
            <param name="timeUnit">
            The time unit desired.
            </param>
            <returns>
            The duration expressed in the desired unit.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Raised if time unit is not recognized.
            </exception>
        </member>
        <member name="M:NFluent.Helpers.TimeHelper.ToTimeSpan(System.Double,NFluent.TimeUnit)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> representing the duration expressed in <see cref="T:NFluent.TimeUnit"/>.
            </summary>
            <param name="value">
            Duration duration.
            </param>
            <param name="timeUnit">
            Duration unit.
            </param>
            <returns>
            A <see cref="T:System.TimeSpan"/> instance of that duration.
            </returns>
            <exception cref="T:System.InvalidOperationException">Raised if time unit is not recognized.</exception>
        </member>
        <member name="M:NFluent.Helpers.TimeHelper.Convert(System.TimeSpan,NFluent.TimeUnit)">
            <summary>
            Expresses a <see cref="T:System.TimeSpan"/> duration in the desired <see cref="T:NFluent.TimeUnit"/>.
            </summary>
            <param name="value">Duration to convert.</param>
            <param name="unit"><see cref="T:NFluent.TimeUnit"/> to convert to.</param>
            <returns>The duration in <see cref="T:NFluent.TimeUnit"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Raised if time unit is not recognized.</exception>
        </member>
        <member name="M:NFluent.Helpers.TimeHelper.DiscoverUnit(System.TimeSpan)">
            <summary>
            Discover the most appropriate <see cref="T:NFluent.TimeUnit"/> to express the given duration.
            </summary>
            <param name="timeSpan">
            Duration to analyze.
            </param>
            <returns>
            The most appropriate <see cref="T:NFluent.TimeUnit"/>.
            </returns>
        </member>
        <member name="T:NFluent.INullableOrNumberCheckLink`1">
            <summary>
            Provides a way to chain two <see cref="T:NFluent.IForkableCheck"/> instances or to chain.
            </summary>
            <typeparam name="N">Number type of the checked nullable.</typeparam>
        </member>
        <member name="P:NFluent.INullableOrNumberCheckLink`1.And">
            <summary>
            Chains a new fluent check on the current one for the nullable value.
            </summary>
            <value>
            The new fluent check instance dedicated to the nullable, which has been chained to the previous one.
            </value>
        </member>
        <member name="P:NFluent.INullableOrNumberCheckLink`1.Which">
            <summary>
            Chains a new <see cref="T:NFluent.ICheck`1"/> instance to the current check.
            </summary>
            <value>
            The new fluent check instance dedicated to the nullable Value, which has been chained to the previous one.
            </value>
        </member>
        <member name="T:NFluent.NullableOrNumberCheckLink`1">
            <summary>
            Provides a way to chain two <see cref="T:NFluent.IForkableCheck"/> instances or to chain.
            </summary>
            <typeparam name="N">Number type of the checked nullable.</typeparam>
        </member>
        <member name="M:NFluent.NullableOrNumberCheckLink`1.#ctor(NFluent.ICheck{System.Nullable{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:NFluent.NullableOrNumberCheckLink`1"/> class.
            </summary>
            <param name="previousCheck">The previous fluent check.</param>
        </member>
        <member name="P:NFluent.NullableOrNumberCheckLink`1.And">
            <summary>
            Chains a new fluent check on the current one for the nullable value.
            </summary>
            <value>
            The new fluent check instance dedicated to the nullable, which has been chained to the previous one.
            </value>
        </member>
        <member name="P:NFluent.NullableOrNumberCheckLink`1.Which">
            <summary>
            Chains a new <see cref="T:NFluent.ICheck`1"/> instance to the current check.
            </summary>
            <value>
            The new fluent check instance dedicated to the nullable Value, which has been chained to the previous one.
            </value>
        </member>
        <member name="T:NFluent.RunTrace">
            <summary>
            This class stores trace information for a code evaluation.
            </summary>
        </member>
        <member name="P:NFluent.RunTrace.ExecutionTime">
            <summary>
            Gets or sets the execution time of the checked code.
            </summary>
            <value>
            The execution time.
            </value>
        </member>
        <member name="P:NFluent.RunTrace.RaisedException">
            <summary>
            Gets or sets the raised exception.
            </summary>
            <value>
            The raised exception.
            </value>
        </member>
        <member name="P:NFluent.RunTrace.TotalProcessorTime">
            <summary>
            Gets or sets the total processor time.
            </summary>
            <value>
            The total processor time.
            </value>
        </member>
        <member name="T:NFluent.RunTraceResult`1">
            <summary>
            This code stores trace information for a code evaluation and its returned value.
            </summary>
            <typeparam name="T">Code return type.</typeparam>
        </member>
        <member name="P:NFluent.RunTraceResult`1.Result">
            <summary>
            Gets or sets the result of the evaluated code.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:NFluent.ByteCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Byte"/> value.
            </summary>
        </member>
        <member name="M:NFluent.ByteCheckExtensions.IsBefore(NFluent.ICheck{System.Byte},System.Byte)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.ByteCheckExtensions.IsAfter(NFluent.ICheck{System.Byte},System.Byte)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.ByteCheckExtensions.IsZero(NFluent.ICheck{System.Byte})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.ByteCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.Byte}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.ByteCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.Byte}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.ByteCheckExtensions.IsNotZero(NFluent.ICheck{System.Byte})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.ByteCheckExtensions.IsLessThan(NFluent.ICheck{System.Byte},System.Byte)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.ByteCheckExtensions.IsGreaterThan(NFluent.ICheck{System.Byte},System.Byte)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="T:NFluent.DecimalCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Decimal"/> value.
            </summary>
        </member>
        <member name="M:NFluent.DecimalCheckExtensions.IsBefore(NFluent.ICheck{System.Decimal},System.Decimal)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.DecimalCheckExtensions.IsAfter(NFluent.ICheck{System.Decimal},System.Decimal)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.DecimalCheckExtensions.IsZero(NFluent.ICheck{System.Decimal})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.DecimalCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.Decimal}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.DecimalCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.Decimal}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.DecimalCheckExtensions.IsNotZero(NFluent.ICheck{System.Decimal})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.DecimalCheckExtensions.IsLessThan(NFluent.ICheck{System.Decimal},System.Decimal)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.DecimalCheckExtensions.IsGreaterThan(NFluent.ICheck{System.Decimal},System.Decimal)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="T:NFluent.DecimalSignedCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Decimal"/> value that is considered as a signed number.
            </summary>
        </member>
        <member name="M:NFluent.DecimalSignedCheckExtensions.IsPositive(NFluent.ICheck{System.Decimal})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.DecimalSignedCheckExtensions.IsNegative(NFluent.ICheck{System.Decimal})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="T:NFluent.DoubleCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Double"/> value.
            </summary>
        </member>
        <member name="M:NFluent.DoubleCheckExtensions.IsBefore(NFluent.ICheck{System.Double},System.Double)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.DoubleCheckExtensions.IsAfter(NFluent.ICheck{System.Double},System.Double)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.DoubleCheckExtensions.IsZero(NFluent.ICheck{System.Double})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.DoubleCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.Double}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.DoubleCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.Double}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.DoubleCheckExtensions.IsNotZero(NFluent.ICheck{System.Double})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.DoubleCheckExtensions.IsLessThan(NFluent.ICheck{System.Double},System.Double)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.DoubleCheckExtensions.IsGreaterThan(NFluent.ICheck{System.Double},System.Double)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="T:NFluent.DoubleSignedCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Double"/> value that is considered as a signed number.
            </summary>
        </member>
        <member name="M:NFluent.DoubleSignedCheckExtensions.IsPositive(NFluent.ICheck{System.Double})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.DoubleSignedCheckExtensions.IsNegative(NFluent.ICheck{System.Double})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="T:NFluent.FloatCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Single"/> value.
            </summary>
        </member>
        <member name="M:NFluent.FloatCheckExtensions.IsBefore(NFluent.ICheck{System.Single},System.Single)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.FloatCheckExtensions.IsAfter(NFluent.ICheck{System.Single},System.Single)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.FloatCheckExtensions.IsZero(NFluent.ICheck{System.Single})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.FloatCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.Single}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.FloatCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.Single}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.FloatCheckExtensions.IsNotZero(NFluent.ICheck{System.Single})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.FloatCheckExtensions.IsLessThan(NFluent.ICheck{System.Single},System.Single)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.FloatCheckExtensions.IsGreaterThan(NFluent.ICheck{System.Single},System.Single)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="T:NFluent.FloatSignedCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Single"/> value that is considered as a signed number.
            </summary>
        </member>
        <member name="M:NFluent.FloatSignedCheckExtensions.IsPositive(NFluent.ICheck{System.Single})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.FloatSignedCheckExtensions.IsNegative(NFluent.ICheck{System.Single})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="T:NFluent.FloatSpecificCheckExtensions">
            <summary>
            Provides specific check methods to be executed on an <see cref="T:System.Single"/> value.
            </summary>
        </member>
        <member name="M:NFluent.FloatSpecificCheckExtensions.IsNaN(NFluent.ICheck{System.Single})">
            <summary>
            Determines whether the specified number evaluates to a value that is not a number (NaN).
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is a number.</exception>
        </member>
        <member name="M:NFluent.FloatSpecificCheckExtensions.IsFinite(NFluent.ICheck{System.Single})">
            <summary>
            Determines whether the specified number evaluates to a value that is finite (i.e. not infinity).
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The specified number evaluates to a value that is infinite (i.e. equals to infinity).</exception>
        </member>
        <member name="T:NFluent.LongCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Int64"/> value.
            </summary>
        </member>
        <member name="M:NFluent.LongCheckExtensions.IsBefore(NFluent.ICheck{System.Int64},System.Int64)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.LongCheckExtensions.IsAfter(NFluent.ICheck{System.Int64},System.Int64)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.LongCheckExtensions.IsZero(NFluent.ICheck{System.Int64})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.LongCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.Int64}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.LongCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.Int64}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.LongCheckExtensions.IsNotZero(NFluent.ICheck{System.Int64})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.LongCheckExtensions.IsLessThan(NFluent.ICheck{System.Int64},System.Int64)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.LongCheckExtensions.IsGreaterThan(NFluent.ICheck{System.Int64},System.Int64)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="T:NFluent.LongSignedCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Int64"/> value that is considered as a signed number.
            </summary>
        </member>
        <member name="M:NFluent.LongSignedCheckExtensions.IsPositive(NFluent.ICheck{System.Int64})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.LongSignedCheckExtensions.IsNegative(NFluent.ICheck{System.Int64})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="T:NFluent.SbyteCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.SByte"/> value.
            </summary>
        </member>
        <member name="M:NFluent.SbyteCheckExtensions.IsBefore(NFluent.ICheck{System.SByte},System.SByte)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.SbyteCheckExtensions.IsAfter(NFluent.ICheck{System.SByte},System.SByte)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.SbyteCheckExtensions.IsZero(NFluent.ICheck{System.SByte})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.SbyteCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.SByte}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.SbyteCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.SByte}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.SbyteCheckExtensions.IsNotZero(NFluent.ICheck{System.SByte})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.SbyteCheckExtensions.IsLessThan(NFluent.ICheck{System.SByte},System.SByte)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.SbyteCheckExtensions.IsGreaterThan(NFluent.ICheck{System.SByte},System.SByte)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="T:NFluent.SbyteSignedCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.SByte"/> value that is considered as a signed number.
            </summary>
        </member>
        <member name="M:NFluent.SbyteSignedCheckExtensions.IsPositive(NFluent.ICheck{System.SByte})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.SbyteSignedCheckExtensions.IsNegative(NFluent.ICheck{System.SByte})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="T:NFluent.ShortCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Int16"/> value.
            </summary>
        </member>
        <member name="M:NFluent.ShortCheckExtensions.IsBefore(NFluent.ICheck{System.Int16},System.Int16)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.ShortCheckExtensions.IsAfter(NFluent.ICheck{System.Int16},System.Int16)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.ShortCheckExtensions.IsZero(NFluent.ICheck{System.Int16})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.ShortCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.Int16}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.ShortCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.Int16}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.ShortCheckExtensions.IsNotZero(NFluent.ICheck{System.Int16})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.ShortCheckExtensions.IsLessThan(NFluent.ICheck{System.Int16},System.Int16)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.ShortCheckExtensions.IsGreaterThan(NFluent.ICheck{System.Int16},System.Int16)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="T:NFluent.ShortSignedCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.Int16"/> value that is considered as a signed number.
            </summary>
        </member>
        <member name="M:NFluent.ShortSignedCheckExtensions.IsPositive(NFluent.ICheck{System.Int16})">
            <summary>
            Checks that the actual value is strictly positive.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="M:NFluent.ShortSignedCheckExtensions.IsNegative(NFluent.ICheck{System.Int16})">
            <summary>
            Checks that the actual value is strictly negative.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not strictly positive.</exception>
        </member>
        <member name="T:NFluent.UintCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.UInt32"/> value.
            </summary>
        </member>
        <member name="M:NFluent.UintCheckExtensions.IsBefore(NFluent.ICheck{System.UInt32},System.UInt32)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.UintCheckExtensions.IsAfter(NFluent.ICheck{System.UInt32},System.UInt32)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.UintCheckExtensions.IsZero(NFluent.ICheck{System.UInt32})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.UintCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.UInt32}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.UintCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.UInt32}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.UintCheckExtensions.IsNotZero(NFluent.ICheck{System.UInt32})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.UintCheckExtensions.IsLessThan(NFluent.ICheck{System.UInt32},System.UInt32)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.UintCheckExtensions.IsGreaterThan(NFluent.ICheck{System.UInt32},System.UInt32)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="T:NFluent.UlongCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.UInt64"/> value.
            </summary>
        </member>
        <member name="M:NFluent.UlongCheckExtensions.IsBefore(NFluent.ICheck{System.UInt64},System.UInt64)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.UlongCheckExtensions.IsAfter(NFluent.ICheck{System.UInt64},System.UInt64)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.UlongCheckExtensions.IsZero(NFluent.ICheck{System.UInt64})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.UlongCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.UInt64}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.UlongCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.UInt64}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.UlongCheckExtensions.IsNotZero(NFluent.ICheck{System.UInt64})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.UlongCheckExtensions.IsLessThan(NFluent.ICheck{System.UInt64},System.UInt64)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.UlongCheckExtensions.IsGreaterThan(NFluent.ICheck{System.UInt64},System.UInt64)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="T:NFluent.UshortCheckExtensions">
            <summary>
            Provides check methods to be executed on an <see cref="T:System.UInt16"/> value.
            </summary>
        </member>
        <member name="M:NFluent.UshortCheckExtensions.IsBefore(NFluent.ICheck{System.UInt16},System.UInt16)">
            <summary>
            Determines whether the specified value is before the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not before the other one.</exception>
        </member>
        <member name="M:NFluent.UshortCheckExtensions.IsAfter(NFluent.ICheck{System.UInt16},System.UInt16)">
            <summary>
            Determines whether the specified value is after the other one.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <param name="givenValue">The other value.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The current value is not after the other one.</exception>
        </member>
        <member name="M:NFluent.UshortCheckExtensions.IsZero(NFluent.ICheck{System.UInt16})">
            <summary>
            Checks that the actual value is equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is not equal to zero.</exception>
        </member>
        <member name="M:NFluent.UshortCheckExtensions.HasAValue(NFluent.ICheck{System.Nullable{System.UInt16}})">
            <summary>
            Checks that the actual nullable value has a value and thus, is not null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>A check link.</returns>
            <exception cref="T:NFluent.FluentCheckException">The value is null.</exception>
        </member>
        <member name="M:NFluent.UshortCheckExtensions.HasNoValue(NFluent.ICheck{System.Nullable{System.UInt16}})">
            <summary>
            Checks that the actual nullable value has no value and thus, is null. 
            Note: this method does not return A check link since the nullable is null.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <exception cref="T:NFluent.FluentCheckException">The value is not null.</exception>
        </member>
        <member name="M:NFluent.UshortCheckExtensions.IsNotZero(NFluent.ICheck{System.UInt16})">
            <summary>
            Checks that the actual value is NOT equal to zero.
            </summary>
            <param name="check">The fluent check to be extended.</param>
            <returns>
              <returns>A check link.</returns>
            </returns>
            <exception cref="T:NFluent.FluentCheckException">The value is equal to zero.</exception>
        </member>
        <member name="M:NFluent.UshortCheckExtensions.IsLessThan(NFluent.ICheck{System.UInt16},System.UInt16)">
            <summary>
            Checks that the actual value is less than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="M:NFluent.UshortCheckExtensions.IsGreaterThan(NFluent.ICheck{System.UInt16},System.UInt16)">
            <summary>
            Checks that the actual value is more than an operand.
            </summary>
            <param name="check">
            The fluent check to be extended.
            </param>
            <param name="comparand">
            Comparand to compare the value to.
            </param>
            <returns>
            A check link.
            </returns>
            <exception cref="T:NFluent.FluentCheckException">
            The value is not less than the comparand.
            </exception>
        </member>
        <member name="T:NFluent.TimeUnit">
            <summary>
            Enumerate the available time unit.
            </summary>
        </member>
        <member name="F:NFluent.TimeUnit.Nanoseconds">
            <summary>
            The nanoseconds.
            </summary>
        </member>
        <member name="F:NFluent.TimeUnit.Microseconds">
            <summary>
            The Microseconds.
            </summary>
        </member>
        <member name="F:NFluent.TimeUnit.Milliseconds">
            <summary>
            The Milliseconds.
            </summary>
        </member>
        <member name="F:NFluent.TimeUnit.Seconds">
            <summary>
            The seconds.
            </summary>
        </member>
        <member name="F:NFluent.TimeUnit.Minutes">
            <summary>
            The minutes.
            </summary>
        </member>
        <member name="F:NFluent.TimeUnit.Hours">
            <summary>
            The hours.
            </summary>
        </member>
        <member name="F:NFluent.TimeUnit.Days">
            <summary>
            The days.
            </summary>
        </member>
        <member name="F:NFluent.TimeUnit.Weeks">
            <summary>
            The weeks.
            </summary>
        </member>
    </members>
</doc>
